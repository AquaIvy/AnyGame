<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DogSE.Library.net35</name>
    </assembly>
    <members>
        <member name="T:DogSE.Library.Common.ConcurrentQueue`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DogSE.Library.Common.ConcurrentQueue`1.Enqueue(`0)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:DogSE.Library.Common.ConcurrentQueue`1.TryDequeue(`0@)">
            <summary>
            
            </summary>
            <param name="returnT"></param>
            <returns></returns>
        </member>
        <member name="P:DogSE.Library.Common.ConcurrentQueue`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:DogSE.Library.Common.ObjectPool`1">
            <summary>
            对象池
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:DogSE.Library.Common.ObjectPool`1.m_InitialCapacity">
            <summary>
            内存池的容量
            </summary>
        </member>
        <member name="P:DogSE.Library.Common.ObjectPool`1.MaxCapacity">
            <summary>
            最大持有容量
            如果发生miss，仍然会按照初始容量去扩容
            但是，一旦发生回收，池里的数量大于最大容量，则不会再往池里丢数据
            会直接抛弃掉
            </summary>
        </member>
        <member name="F:DogSE.Library.Common.ObjectPool`1.m_FreePool">
            <summary>
            内存池
            </summary>
        </member>
        <member name="F:DogSE.Library.Common.ObjectPool`1.m_Misses">
            <summary>
            内存池的容量不足时再次请求数据的次数
            </summary>
        </member>
        <member name="M:DogSE.Library.Common.ObjectPool`1.#ctor(System.Int64,System.Int32)">
            <summary>
            初始化内存池
            </summary>
            <param name="iInitialCapacity">初始化内存池对象的数量</param>
            <param name="maxCapacity">最大容量</param>
        </member>
        <member name="M:DogSE.Library.Common.ObjectPool`1.Extend">
            <summary>
            扩展数据
            </summary>
        </member>
        <member name="M:DogSE.Library.Common.ObjectPool`1.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:DogSE.Library.Common.ObjectPool`1.ToString">
            <summary>
            输出对象池的一些状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Common.ObjectPool`1.#ctor(System.String,System.Int64)">
            <summary>
            初始化内存池
            </summary>
            <param name="name">对象池的名字</param>
            <param name="iInitialCapacity">初始化内存池对象的数量</param>
        </member>
        <member name="M:DogSE.Library.Common.ObjectPool`1.AcquireContent">
            <summary>
            内存池请求数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Common.ObjectPool`1.ReleaseContent(`0)">
            <summary>
            内存池释放数据
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:DogSE.Library.Common.ObjectPool`1.Free">
            <summary>
            释放内存池内全部的数据
            </summary>
        </member>
        <member name="M:DogSE.Library.Common.ObjectPool`1.GetPoolInfo">
            <summary>
            给出内存池的详细信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:DogSE.Library.Common.ObjectPool`1.Name">
            <summary>
            对象池的名字
            </summary>
        </member>
        <member name="T:DogSE.Library.Common.StaticInstanceObjectPool`1">
            <summary>
            带单例模式的对象池
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DogSE.Library.Common.StaticInstanceObjectPool`1.Instatnce">
            <summary>
            单例模式
            </summary>
        </member>
        <member name="T:DogSE.Library.Common.PoolInfo">
            <summary>
            对象池信息
            </summary>
        </member>
        <member name="P:DogSE.Library.Common.PoolInfo.FreeCount">
            <summary>
            空闲数量
            </summary>
        </member>
        <member name="P:DogSE.Library.Common.PoolInfo.AcquireCount">
            <summary>
            申请的数量
            </summary>
        </member>
        <member name="P:DogSE.Library.Common.PoolInfo.ReleaseCount">
            <summary>
            释放的数量
            </summary>
        </member>
        <member name="P:DogSE.Library.Common.PoolInfo.InitialCapacity">
            <summary>
            初始化池数量
            </summary>
        </member>
        <member name="P:DogSE.Library.Common.PoolInfo.CurrentCapacity">
            <summary>
            当前池数量
            </summary>
        </member>
        <member name="P:DogSE.Library.Common.PoolInfo.Misses">
            <summary>
            请求失败次数
            </summary>
        </member>
        <member name="P:DogSE.Library.Common.PoolInfo.Name">
            <summary>
            对象池的名字
            </summary>
        </member>
        <member name="M:DogSE.Library.Common.PoolInfo.ToString">
            <summary>
            输出当前数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:DogSE.Library.Common.IPoolInfo">
            <summary>
            对象池信息
            </summary>
        </member>
        <member name="P:DogSE.Library.Common.IPoolInfo.Name">
            <summary>
            对象池的名字
            </summary>
        </member>
        <member name="M:DogSE.Library.Common.IPoolInfo.GetPoolInfo">
            <summary>
            获得对象池信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:DogSE.Library.Common.ObjectPoolStateInfo">
            <summary>
            对象池信息
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DogSE.Library.Common.ObjectPoolStateInfo.GetPoolInfos">
            <summary>
            获得所有内存池的信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Common.ObjectPoolStateInfo.GetPoolInfos(System.String)">
            <summary>
            获得指定名称的内存池信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:DogSE.Library.Common.StaticObjectPool`1">
            <summary>
            泛型的，静态唯一的对象池【线程安全，放心使用】
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DogSE.Library.Common.StaticObjectPool`1.AcquireContent">
            <summary>
            内存池请求数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Common.StaticObjectPool`1.ReleaseContent(`0)">
            <summary>
            回收内存
            </summary>
            <param name="contentT"></param>
        </member>
        <member name="T:DogSE.Library.Common.TInstance`1">
            <summary>
            单例模板
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DogSE.Library.Common.TInstance`1.Instance">
            <summary>
            单例
            </summary>
        </member>
        <member name="T:DogSE.Library.Component.ComponentManager">
            <summary>
            组件管理器的实现模式
            </summary>
        </member>
        <member name="M:DogSE.Library.Component.ComponentManager.RegisterComponent``1(System.String,``0)">
            <summary>
            注册一个组件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="componentId"></param>
            <param name="component"></param>
        </member>
        <member name="M:DogSE.Library.Component.ComponentManager.GetComponent``1(System.String)">
            <summary>
            获得一个组件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="componentId"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Component.ComponentManager.ReleaseComponent``1">
            <summary>
            释放组件资源
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DogSE.Library.Component.ComponentManager.Clear">
            <summary>
            清理所有数据（为GC用，注意使用场所）
            </summary>
        </member>
        <member name="T:DogSE.Library.Component.IComponentManager">
            <summary>
            组件模式模块
            </summary>
        </member>
        <member name="M:DogSE.Library.Component.IComponentManager.RegisterComponent``1(System.String,``0)">
            <summary>
            注册一个组件数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="componentId">组件ID</param>
            <param name="component">组件实例（非空）</param>
        </member>
        <member name="M:DogSE.Library.Component.IComponentManager.GetComponent``1(System.String)">
            <summary>
            获得一个组件数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="componentId">组件ID</param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Component.IComponentManager.ReleaseComponent``1">
            <summary>
            释放组件的资源
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:DogSE.Library.Files.FileMgr">
            <summary>
            
            </summary>
        </member>
        <member name="M:DogSE.Library.Files.FileMgr.DeleteFile(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:DogSE.Library.Files.FileMgr.CreateFile(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Files.FileMgr.CreateDirectory(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:DogSE.Library.Files.FileMgr.CreateDirectory(System.String,System.Boolean)">
            <summary>
            创建目录(是否先删除原目录)
            </summary>
            <param name="path"></param>
            <param name="isDeleteFirst"></param>
        </member>
        <member name="M:DogSE.Library.Files.FileMgr.SaveFile(System.String,System.Byte[])">
            <summary>
            保存文件到本地
            </summary>
            <param name="path">要保存的路径</param>
            <param name="bytes">文件内容</param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Files.FileMgr.GetAllFileSize(System.String)">
            <summary>
            获取文件夹下所有文件大小(KB)
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Files.FileMgr.GetFileSize(System.String)">
            <summary>
            获取指定文件大小(KB)
            </summary>
            <param name="path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Files.FileMgr.GetAllFiles(System.String,System.String)">
            <summary>
            获得某一目录下的所有文件
            </summary>
            <param name="dir"></param>
            <param name="noneExtension"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Files.FileMgr.Rename(System.String,System.String)">
            <summary>
            文件（夹）重命名
            </summary>
            <param name="oldname"></param>
            <param name="newname"></param>
        </member>
        <member name="M:DogSE.Library.Files.FileMgr.LoadAssembly(System.String)">
            <summary>
            反射程序集
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Files.FileMgr.LoadFile(System.String)">
            <summary>
            读取文本文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Files.FileMgr.SaveFile(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Files.FileMgr.GetChineseCharCode(System.Char)">
            <summary>
            返回单个汉字的位编码
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Files.FileMgr.ReadFile(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:DogSE.Library.Log.ConsoleAppender">
            <summary>
            控制台日志输出
            </summary>
            <remarks>
            虽然这里实现的是实例的接口
            但控制台只有一个，因此这边的数据都是写入一个静态的列表
            </remarks>
        </member>
        <member name="F:DogSE.Library.Log.ConsoleAppender.s_LogInfoQueue">
            <summary>
            当前需要处理的集合
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.ConsoleAppender.s_LockLogInfoQueue">
            <summary>
            日志操作的锁
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.ConsoleAppender.s_IsLock">
            <summary>
            （全局，现成安全）是否加锁
            </summary>
        </member>
        <member name="M:DogSE.Library.Log.ConsoleAppender.Write(DogSE.Library.Log.LogInfo)">
            <summary>
            写日志（可以多线程操作）
            </summary>
            <param name="info"></param>
        </member>
        <member name="F:DogSE.Library.Log.ConsoleAppender.level">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="P:DogSE.Library.Log.ConsoleAppender.Level">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.ConsoleAppender.s_strInput">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.ConsoleAppender.s_strDosPrompt">
            <summary>
            
            </summary>
        </member>
        <member name="M:DogSE.Library.Log.ConsoleAppender.InternalWriteLine(DogSE.Library.Log.LogMessageType,System.String)">
            <summary>
            
            </summary>
            <param name="messageFlag"></param>
            <param name="strFormat"></param>
        </member>
        <member name="M:DogSE.Library.Log.ConsoleAppender.InternalWriteLine(DogSE.Library.Log.LogMessageType,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="messageFlag"></param>
            <param name="strFormat"></param>
            <param name="arg"></param>
        </member>
        <member name="T:DogSE.Library.Log.ILogAppender">
            <summary>
            日志输出的适配器，所有需要接管日志输入的都需要实现这个接口
            </summary>
        </member>
        <member name="M:DogSE.Library.Log.ILogAppender.Write(DogSE.Library.Log.LogInfo)">
            <summary>
            输出日志
            </summary>
            <param name="info"></param>
        </member>
        <member name="P:DogSE.Library.Log.ILogAppender.Level">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="T:DogSE.Library.Log.UnityAppender">
            <summary>
            unity输出适配器
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.UnityAppender.s_LogInfoQueue">
            <summary>
            当前需要处理的集合
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.UnityAppender.s_LockLogInfoQueue">
            <summary>
            日志操作的锁
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.UnityAppender.s_IsLock">
            <summary>
            （全局，现成安全）是否加锁
            </summary>
        </member>
        <member name="M:DogSE.Library.Log.UnityAppender.Write(DogSE.Library.Log.LogInfo)">
            <summary>
            写日志（可以多线程操作）
            </summary>
            <param name="info"></param>
        </member>
        <member name="F:DogSE.Library.Log.UnityAppender.level">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="P:DogSE.Library.Log.UnityAppender.Level">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="T:DogSE.Library.Log.ILog">
            <summary>
            日志组件的接口
            </summary>
        </member>
        <member name="M:DogSE.Library.Log.ILog.Debug(System.String)">
            <summary>
            输出Debug信息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DogSE.Library.Log.ILog.Debug(System.String,System.Object[])">
            <summary>
            输出Debug信息
            </summary>
            <param name="format"></param>
            <param name="param"></param>
        </member>
        <member name="M:DogSE.Library.Log.ILog.Info(System.String)">
            <summary>
            输出Info信息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DogSE.Library.Log.ILog.Info(System.String,System.Object[])">
            <summary>
            输出Info信息
            </summary>
            <param name="format"></param>
            <param name="param"></param>
        </member>
        <member name="M:DogSE.Library.Log.ILog.Warn(System.String)">
            <summary>
            输出Warn信息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DogSE.Library.Log.ILog.Warn(System.String,System.Object[])">
            <summary>
            输出Warn信息
            </summary>
            <param name="format"></param>
            <param name="param"></param>
        </member>
        <member name="M:DogSE.Library.Log.ILog.Error(System.String)">
            <summary>
            输出Error信息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DogSE.Library.Log.ILog.Error(System.String,System.Object[])">
            <summary>
            输出Error信息
            </summary>
            <param name="format"></param>
            <param name="param"></param>
        </member>
        <member name="M:DogSE.Library.Log.ILog.Error(System.String,System.Exception)">
            <summary>
            输出Error信息
            </summary>
            <param name="str"></param>
            <param name="ex"></param>
        </member>
        <member name="M:DogSE.Library.Log.ILog.Error(System.String,System.String,System.Exception)">
            <summary>
            输出Error信息
            </summary>
            <param name="str"></param>
            <param name="ex"></param>
            <param name="param1"></param>
        </member>
        <member name="M:DogSE.Library.Log.ILog.Error(System.String,System.String,System.String,System.Exception)">
            <summary>
            输出Error信息
            </summary>
            <param name="str"></param>
            <param name="ex"></param>
            <param name="param1"></param>
            <param name="param2"></param>
        </member>
        <member name="M:DogSE.Library.Log.ILog.Error(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            输出Error信息
            </summary>
            <param name="str"></param>
            <param name="ex"></param>
            <param name="param1"></param>
            <param name="param2"></param>
            <param name="param3"></param>
        </member>
        <member name="P:DogSE.Library.Log.ILog.Level">
            <summary>
            日志记录等级
            </summary>
        </member>
        <member name="T:DogSE.Library.Log.LogInfo">
            <summary>
            日志信息
            </summary>
        </member>
        <member name="M:DogSE.Library.Log.LogInfo.#ctor(DogSE.Library.Log.LogMessageType,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="messageFlag"></param>
            <param name="strFormat"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:DogSE.Library.Log.LogInfo.m_messageFlag">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Library.Log.LogInfo.MessageFlag">
            <summary>
            日志标记
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.LogInfo.format">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Library.Log.LogInfo.Format">
            <summary>
            日志信息（格式）
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.LogInfo._parameter">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Library.Log.LogInfo.Parameter">
            <summary>
            如果 format带格式，这里为参数
            </summary>
        </member>
        <member name="M:DogSE.Library.Log.LogInfo.ToString">
            <summary>
            输出定义好的格式化字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:DogSE.Library.Log.LogMessageType">
            <summary>
            日志的输出等级
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.LogMessageType.MSG_NONE">
            <summary>
            空
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.LogMessageType.MSG_STATUS">
            <summary>
            状态
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.LogMessageType.MSG_SQL">
            <summary>
            sql 日志
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.LogMessageType.MSG_DEBUG">
            <summary>
            调试
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.LogMessageType.MSG_INFO">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.LogMessageType.MSG_NOTICE">
            <summary>
            通知
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.LogMessageType.MSG_WARNING">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.LogMessageType.MSG_ERROR">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.LogMessageType.MSG_FATALERROR">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.LogMessageType.MSG_HACK">
            <summary>
            ??
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.LogMessageType.MSG_LOAD">
            <summary>
            初始化
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.LogMessageType.MSG_INPUT">
            <summary>
            输入
            </summary>
        </member>
        <member name="F:DogSE.Library.Log.LogMessageType.MSG_DOS_PROMPT">
            <summary>
            Dos窗口输出
            </summary>
        </member>
        <member name="T:DogSE.Library.Log.Logs">
            <summary>
            线程安全的日志
            </summary>
        </member>
        <member name="M:DogSE.Library.Log.Logs.Debug(System.String)">
            <summary>
            输出Debug信息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.Debug(System.String,System.Object[])">
            <summary>
            输出Debug信息
            </summary>
            <param name="format"></param>
            <param name="param"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.Info(System.String)">
            <summary>
            输出Info信息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.Info(System.String,System.Object[])">
            <summary>
            输出Info信息
            </summary>
            <param name="format"></param>
            <param name="param"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.Notice(System.String)">
            <summary>
            输出Notice信息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.Notice(System.String,System.Object[])">
            <summary>
            输出Notice信息
            </summary>
            <param name="format"></param>
            <param name="param"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.Warn(System.String)">
            <summary>
            输出Warn信息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.Warn(System.String,System.Object[])">
            <summary>
            输出Warn信息
            </summary>
            <param name="format"></param>
            <param name="param"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.Error(System.String)">
            <summary>
            输出Error信息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.Error(System.String,System.String)">
            <summary>
            输出Error信息
            </summary>
            <param name="format"></param>
            <param name="param"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.Error(System.String,System.Int32)">
            <summary>
            输出Error信息
            </summary>
            <param name="format"></param>
            <param name="param"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.Error(System.String,System.Exception)">
            <summary>
            输出Error信息
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.Error(System.String,System.String,System.String)">
            <summary>
            输出Error信息
            </summary>
            <param name="message"></param>
            <param name="param2"></param>
            <param name="param1"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.Error(System.String,System.String,System.String,System.String)">
            <summary>
            输出Error信息
            </summary>
            <param name="message"></param>
            <param name="param2"></param>
            <param name="param1"></param>
            <param name="param3"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.Error(System.String,System.String,System.Exception)">
            <summary>
            输出Error信息
            </summary>
            <param name="message"></param>
            <param name="param1"></param>
            <param name="ex"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.Error(System.String,System.String,System.String,System.Exception)">
            <summary>
            输出Error信息
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
            <param name="param1"></param>
            <param name="param2"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.Error(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            输出Error信息
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
            <param name="param1"></param>
            <param name="param2"></param>
            <param name="param3"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.WriteLine(DogSE.Library.Log.LogMessageType,System.String)">
            <summary>
            防止多线程的问题
            </summary>
            <param name="messageFlag"></param>
            <param name="strFormat"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.WriteLine(DogSE.Library.Log.LogMessageType,System.String,System.Object[])">
            <summary>
            防止多线程的问题
            </summary>
            <param name="messageFlag"></param>
            <param name="strFormat"></param>
            <param name="arg"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.AddAppender(DogSE.Library.Log.ILogAppender)">
            <summary>
            添加日志的输出适配器
            </summary>
            <param name="appender"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.RemoveAppender(DogSE.Library.Log.ILogAppender)">
            <summary>
            删除某个日志输出适配器
            </summary>
            <param name="appender"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.GetMessageType``1">
            <summary>
            获得某个适配器类型的日志输出等级
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Log.Logs.SetMessageLevel``1(DogSE.Library.Log.LogMessageType)">
            <summary>
            设置某个适配器的日志输出等级
            </summary>
            <typeparam name="TLogAppender"></typeparam>
            <param name="level"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.ParseLogMessageType(System.String)">
            <summary>
            将一个字符串抓换为日志的输出类型
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Log.Logs.SetLogLevel(System.String)">
            <summary>
            设置log等级
            该设置会把所有的日志输出按照一个等级来操作
            </summary>
            <param name="logLevel"></param>
        </member>
        <member name="M:DogSE.Library.Log.Logs.AddConsoleAppender">
            <summary>
            添加一个控制台的适配器
            </summary>
        </member>
        <member name="T:DogSE.Library.Serialize.EmptyLineBehavior">
            <summary>
                Determines how empty lines are interpreted when reading CSV files.
                These values do not affect empty lines that occur within quoted fields
                or empty lines that appear at the end of the input file.
            </summary>
            <remarks>
            code from http://www.blackbeltcoder.com/Articles/files/reading-and-writing-csv-files-in-c
            </remarks>
        </member>
        <member name="F:DogSE.Library.Serialize.EmptyLineBehavior.NoColumns">
            <summary>
                Empty lines are interpreted as a line with zero columns.
            </summary>
        </member>
        <member name="F:DogSE.Library.Serialize.EmptyLineBehavior.EmptyColumn">
            <summary>
                Empty lines are interpreted as a line with a single empty column.
            </summary>
        </member>
        <member name="F:DogSE.Library.Serialize.EmptyLineBehavior.Ignore">
            <summary>
                Empty lines are skipped over as though they did not exist.
            </summary>
        </member>
        <member name="F:DogSE.Library.Serialize.EmptyLineBehavior.EndOfFile">
            <summary>
                An empty line is interpreted as the end of the input file.
            </summary>
        </member>
        <member name="T:DogSE.Library.Serialize.CsvFileCommon">
            <summary>
                Common base class for CSV reader and writer classes.
            </summary>
        </member>
        <member name="F:DogSE.Library.Serialize.CsvFileCommon.SpecialChars">
            <summary>
                These are special characters in CSV files. If a column contains any
                of these characters, the entire column is wrapped in double quotes.
            </summary>
        </member>
        <member name="P:DogSE.Library.Serialize.CsvFileCommon.Delimiter">
            <summary>
                Gets/sets the character used for column delimiters.
            </summary>
        </member>
        <member name="P:DogSE.Library.Serialize.CsvFileCommon.Quote">
            <summary>
                Gets/sets the character used for column quotes.
            </summary>
        </member>
        <member name="T:DogSE.Library.Serialize.CsvFileReader">
            <summary>
                Class for reading from comma-separated-value (CSV) files
            </summary>
        </member>
        <member name="M:DogSE.Library.Serialize.CsvFileReader.#ctor(System.IO.Stream,DogSE.Library.Serialize.EmptyLineBehavior)">
            <summary>
                Initializes a new instance of the CsvFileReader class for the
                specified stream.
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="emptyLineBehavior">Determines how empty lines are handled</param>
        </member>
        <member name="M:DogSE.Library.Serialize.CsvFileReader.#ctor(System.String,DogSE.Library.Serialize.EmptyLineBehavior)">
            <summary>
                Initializes a new instance of the CsvFileReader class for the
                specified file path.
            </summary>
            <param name="path">The name of the CSV file to read from</param>
            <param name="emptyLineBehavior">Determines how empty lines are handled</param>
        </member>
        <member name="M:DogSE.Library.Serialize.CsvFileReader.Dispose">
            <summary>
                Propagate Dispose to StreamReader
            </summary>
        </member>
        <member name="M:DogSE.Library.Serialize.CsvFileReader.ReadRow(System.Collections.Generic.List{System.String})">
            <summary>
                Reads a row of columns from the current CSV file. Returns false if no
                more data could be read because the end of the file was reached.
            </summary>
            <param name="columns">Collection to hold the columns read</param>
        </member>
        <member name="M:DogSE.Library.Serialize.CsvFileReader.ReadQuotedColumn">
            <summary>
                Reads a quoted column by reading from the current line until a
                closing quote is found or the end of the file is reached. On return,
                the current position points to the delimiter or the end of the last
                line in the file. Note: CurrLine may be set to null on return.
            </summary>
        </member>
        <member name="M:DogSE.Library.Serialize.CsvFileReader.ReadUnquotedColumn">
            <summary>
                Reads an unquoted column by reading from the current line until a
                delimiter is found or the end of the line is reached. On return, the
                current position points to the delimiter or the end of the current
                line.
            </summary>
        </member>
        <member name="T:DogSE.Library.Serialize.CsvFileWriter">
            <summary>
                Class for writing to comma-separated-value (CSV) files.
            </summary>
        </member>
        <member name="M:DogSE.Library.Serialize.CsvFileWriter.#ctor(System.IO.Stream)">
            <summary>
                Initializes a new instance of the CsvFileWriter class for the
                specified stream.
            </summary>
            <param name="stream">The stream to write to</param>
        </member>
        <member name="M:DogSE.Library.Serialize.CsvFileWriter.#ctor(System.String)">
            <summary>
                Initializes a new instance of the CsvFileWriter class for the
                specified file path.
            </summary>
            <param name="path">The name of the CSV file to write to</param>
        </member>
        <member name="M:DogSE.Library.Serialize.CsvFileWriter.Dispose">
            <summary>
                Propagate Dispose to StreamReader
            </summary>
        </member>
        <member name="M:DogSE.Library.Serialize.CsvFileWriter.WriteRow(System.Collections.Generic.List{System.String})">
            <summary>
                Writes a row of columns to the current CSV file.
            </summary>
            <param name="columns">The list of columns to write</param>
        </member>
        <member name="M:DogSE.Library.Serialize.CsvFileWriter.Flush">
            <summary>
            刷新数据
            </summary>
        </member>
        <member name="T:DogSE.Library.Serialize.CSVSerializeUtil">
            <summary>
            CSV 文件序列化
            </summary>
        </member>
        <member name="M:DogSE.Library.Serialize.CSVSerializeUtil.CSVDeserialize(System.String,System.Type)">
            <summary>
            将csv文件反序列化到对象数组里
            </summary>
            <param name="csvStr"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:DogSE.Library.Serialize.CSVSerializeUtil.CurrentLine">
            <summary>
            当前正在处理的列
            </summary>
        </member>
        <member name="M:DogSE.Library.Serialize.CSVSerializeUtil.GetPropertyByAliases(System.Type,System.String)">
            <summary>
            通过别名或者列属性
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Serialize.CSVSerializeUtil.IsListEnum(System.Type)">
            <summary>
            释放时List&lt;枚举&gt;
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Serialize.CSVSerializeUtil.CSVDeserialize``1(System.String)">
            <summary>
            CSV 反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="csvStr">csv的字符串</param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Serialize.CSVSerializeUtil.CSVDeserializeFile``1(System.String)">
            <summary>
            CSV 反序列一个文件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="csvFileName">某个csv的文件</param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Serialize.CSVSerializeUtil.CSVSerialize``1(``0[])">
            <summary>
            序列化到csv字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
        </member>
        <member name="T:DogSE.Library.Serialize.CSVColumnAttribute">
            <summary>
            给一个csv的列定义一个别名
            </summary>
        </member>
        <member name="M:DogSE.Library.Serialize.CSVColumnAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name">别名</param>
        </member>
        <member name="P:DogSE.Library.Serialize.CSVColumnAttribute.Aliases">
            <summary>
            别名
            </summary>
        </member>
        <member name="T:DogSE.Library.Serialize.XmlSerializeUtil">
            <summary>
            xml序列化辅助类
            </summary>
        </member>
        <member name="M:DogSE.Library.Serialize.XmlSerializeUtil.XmlDeserialize``1(System.String)">
            <summary>
            Xml 反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlStr"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Serialize.XmlSerializeUtil.XmlDeserialize(System.String,System.Type)">
            <summary>
            Xml 反序列化
            </summary>
            <param name="xmlStr"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Serialize.XmlSerializeUtil.XmlSerialize``1(``0)">
            <summary>
            将一个对象序列化为一个xml对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:DogSE.Library.Time.OneServer">
            <summary>
            暂时用这个来获得全部时间，稍后会对它的获取方法做调整
            </summary>
        </member>
        <member name="P:DogSE.Library.Time.OneServer.NowTime">
            <summary>
            服务器当前的时间
            </summary>
        </member>
        <member name="M:DogSE.Library.Time.OneServer.GetServerTime">
            <summary>
            获得服务器时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Time.OneServer.SetServerTime(System.DateTime)">
            <summary>
            设置服务器时间
            </summary>
            <param name="serverTime"></param>
        </member>
        <member name="T:DogSE.Library.Util.ConvertString">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Library.Util.ConvertString.s_UTF8">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Library.Util.ConvertString.UTF8">
            <summary>
            Safe UTF8
            </summary>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ToBoolean(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ConvertToBoolean(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ToSingle(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ConvertToSingle(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ToDouble(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ConvertToDouble(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ToTimeSpan(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ConvertToTimeSpan(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ToDateTime(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ConvertToDateTime(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ToInt16(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ConvertToInt16(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ToUInt16(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ConvertToUInt16(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ToInt32(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ConvertToInt32(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ToUInt32(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ConvertToUInt32(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ToLong64(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ConvertToLong64(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ToULong64(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ConvertToULong64(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ToIPAddress(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ConvertToIPAddress(System.String)">
            <summary>
            
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ToByteArray(System.String)">
            <summary>
            字符串转换成字节数组
            </summary>
            <param name="byteString"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ToByteArray(System.String,System.Text.Encoding)">
            <summary>
            字符串转换成字节数组
            </summary>
            <param name="byteString"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.Concat(System.Text.StringBuilder@,System.String[])">
            <summary>
            合并字符串
            </summary>
            <param name="stringBuilder"></param>
            <param name="strStringList"></param>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.Coalition(System.String,System.Text.StringBuilder@,System.String)">
            <summary>
            合并字符串
            </summary>
            <param name="strString"></param>
            <param name="stringBuilder"></param>
            <param name="strString2"></param>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.Coalition(System.String,System.Text.StringBuilder@,System.String,System.String)">
            <summary>
            合并字符串
            </summary>
            <param name="strString"></param>
            <param name="stringBuilder"></param>
            <param name="strString2"></param>
            <param name="strString3"> </param>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.Coalition(System.String,System.Text.StringBuilder@,System.String,System.String,System.String)">
            <summary>
            合并字符串
            </summary>
            <param name="strString"></param>
            <param name="stringBuilder"></param>
            <param name="strString2"></param>
            <param name="strString3"></param>
            <param name="strString4"></param>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ToCSVSplit(System.String)">
            <summary>
            将 1,2,3 转换为字符串数组
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ToCSVSplitToInt(System.String)">
            <summary>
            将 1,2,3 转换为字符串数组
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ConvertToCSV(System.Collections.Generic.List{System.String})">
            <summary>
            将字符串列表转为csv格式数据
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ConvertToCSV(System.Collections.Generic.List{System.Int32})">
            <summary>
            将字符串列表转为csv格式数据
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ConvertToCSV(System.Int32[])">
            <summary>
            将字符串列表转为csv格式数据
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.HasUtf8FourWord(System.String)">
            <summary>
            字符串里是否包含4字节的字符
            </summary>
            <remarks>
            代码来源：http://www.cnblogs.com/yangxudong/p/3737593.html
            </remarks>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.ConvertString.ReplaceUtf8FourWord(System.String)">
            <summary>
            替换utf8不识别的超过4个字符的字母
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:DogSE.Library.Util.Insensitive">
            <summary>
            不敏感的字符串大小写比较的类
            </summary>
        </member>
        <member name="F:DogSE.Library.Util.Insensitive.s_Comparer">
            <summary>
            初始化不敏感的字符串大小写比较的接口
            </summary>
        </member>
        <member name="P:DogSE.Library.Util.Insensitive.Comparer">
            <summary>
            返回不敏感的字符串大小写比较的接口
            </summary>
        </member>
        <member name="M:DogSE.Library.Util.Insensitive.Compare(System.String,System.String)">
            <summary>
            不敏感的字符串大小写比较
            </summary>
        </member>
        <member name="M:DogSE.Library.Util.Insensitive.Equals(System.String,System.String)">
            <summary>
            不敏感的字符串比较是否相同
            </summary>
        </member>
        <member name="M:DogSE.Library.Util.Insensitive.StartsWith(System.String,System.String)">
            <summary>
            不敏感的字符串比较第一个字符串前几个字符是否和第二个字符串的完全相同
            </summary>
        </member>
        <member name="M:DogSE.Library.Util.Insensitive.EndsWith(System.String,System.String)">
            <summary>
            不敏感的字符串比较第一个字符串后几个字符是否和第二个字符串的完全相同
            </summary>
        </member>
        <member name="M:DogSE.Library.Util.Insensitive.Contains(System.String,System.String)">
            <summary>
            不敏感的字符串比较第一个字符串是否完全包容第二个字符串
            </summary>
        </member>
        <member name="T:DogSE.Library.Util.Lang">
            <summary>
            服务器端的翻译语言处理模块
            </summary>
        </member>
        <member name="M:DogSE.Library.Util.Lang.InitLangString(System.String)">
            <summary>
            初始化翻译文件
            </summary>
            <param name="xmlStr"></param>
        </member>
        <member name="M:DogSE.Library.Util.Lang.InitLangFile(System.String)">
            <summary>
            初始化制定的翻译文件
            </summary>
            <param name="xmlFile"></param>
        </member>
        <member name="P:DogSE.Library.Util.Lang.DictCount">
            <summary>
            字典里包含翻译的数量
            </summary>
        </member>
        <member name="M:DogSE.Library.Util.Lang.Init(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            初始化（临时用）
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:DogSE.Library.Util.Lang.ReloadFile">
            <summary>
            重新加载文件
            </summary>
        </member>
        <member name="M:DogSE.Library.Util.Lang.Trans(System.String)">
            <summary>
            将一个语言翻译为目标语言
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.Lang.TransFormat(System.String,System.Object[])">
            <summary>
            将一个语言翻译为目标语言（带格式化输出）
            </summary>
            <param name="source"></param>
            <param name="objParams"></param>
            <returns></returns>
        </member>
        <member name="T:DogSE.Library.Util.RandomEx">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Library.Util.RandomEx.s_Random">
            <summary>
            
            </summary>
        </member>
        <member name="M:DogSE.Library.Util.RandomEx.RandomDouble">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.RandomEx.RandomBool">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.RandomEx.Random(System.Int32)">
            <summary>
            
            </summary>
            <param name="iMaxValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.RandomEx.RandomArray``1(``0[])">
            <summary>
            
            </summary>
            <param name="arrayT"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.RandomEx.RandomList``1(System.Collections.Generic.List{``0})">
            <summary>
            
            </summary>
            <param name="listT"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.RandomEx.RandomInBytes(System.Byte[]@)">
            <summary>
            
            </summary>
            <param name="bufferRandom"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.RandomEx.RandomMinMax(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="iMinValue"></param>
            <param name="iMaxValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.RandomEx.Random(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="iBaseValue"></param>
            <param name="iAppendMaxValue"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.RandomEx.IsTriggerProbability1000(System.Int32)">
            <summary>
            千分比的触发几率
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.RandomEx.IsTriggerProbability100(System.Int32)">
            <summary>
            百分比的触发几率
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.RandomEx.IsTriggerProbability10(System.Int32)">
            <summary>
            十分比的触发几率
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.RandomEx.RandomBitInUint(System.Byte,System.Byte)">
            <summary>
            随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.RandomEx.RandomBitInUshort(System.Byte,System.Byte)">
            <summary>
            随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.RandomEx.RandomBitInByte(System.Byte,System.Byte)">
            <summary>
            随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Library.Util.RandomEx.IsTriggerProbability100(System.Double)">
            <summary>
            注意，这个是小数的随机数哦
            允许传0.001之类的值
            </summary>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="T:DogSE.Library.Util.CONVERT_FLOAT_INT_UINT">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Library.Util.CONVERT_FLOAT_INT_UINT.uiUint">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Library.Util.CONVERT_FLOAT_INT_UINT.iInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Library.Util.CONVERT_FLOAT_INT_UINT.fFloat">
            <summary>
            
            </summary>
        </member>
        <member name="T:DogSE.Library.Util.CONVERT_DOUBLE_LONG_ULONG">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Library.Util.CONVERT_DOUBLE_LONG_ULONG.ulUlong">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Library.Util.CONVERT_DOUBLE_LONG_ULONG.lLong">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Library.Util.CONVERT_DOUBLE_LONG_ULONG.dDouble">
            <summary>
            
            </summary>
        </member>
        <member name="T:DogSE.Common.MathHelper">
            <summary>
            Contains commonly used precalculated values.
            </summary>
        </member>
        <member name="F:DogSE.Common.MathHelper.E">
            <summary>
            Represents the mathematical constant e.
            </summary>
        </member>
        <member name="F:DogSE.Common.MathHelper.Log10E">
            <summary>
            Represents the log base ten of e.
            </summary>
        </member>
        <member name="F:DogSE.Common.MathHelper.Log2E">
            <summary>
            Represents the log base two of e.
            </summary>
        </member>
        <member name="F:DogSE.Common.MathHelper.Pi">
            <summary>
            Represents the value of pi.
            </summary>
        </member>
        <member name="F:DogSE.Common.MathHelper.PiOver2">
            <summary>
            Represents the value of pi divided by two.
            </summary>
        </member>
        <member name="F:DogSE.Common.MathHelper.PiOver4">
            <summary>
            Represents the value of pi divided by four.
            </summary>
        </member>
        <member name="F:DogSE.Common.MathHelper.TwoPi">
            <summary>
            Represents the value of pi times two.
            </summary>
        </member>
        <member name="M:DogSE.Common.MathHelper.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the Cartesian coordinate for one axis of a point that is defined by a given triangle and two normalized barycentric (areal) coordinates.
            </summary>
            <param name="value1">The coordinate on one axis of vertex 1 of the defining triangle.</param>
            <param name="value2">The coordinate on the same axis of vertex 2 of the defining triangle.</param>
            <param name="value3">The coordinate on the same axis of vertex 3 of the defining triangle.</param>
            <param name="amount1">The normalized barycentric (areal) coordinate b2, equal to the weighting factor for vertex 2, the coordinate of which is specified in value2.</param>
            <param name="amount2">The normalized barycentric (areal) coordinate b3, equal to the weighting factor for vertex 3, the coordinate of which is specified in value3.</param>
        </member>
        <member name="M:DogSE.Common.MathHelper.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
        </member>
        <member name="M:DogSE.Common.MathHelper.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Restricts a value to be within a specified range. Reference page contains links to related code samples.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. If value is less than min, min will be returned.</param>
            <param name="max">The maximum value. If value is greater than max, max will be returned.</param>
        </member>
        <member name="M:DogSE.Common.MathHelper.Distance(System.Single,System.Single)">
            <summary>
            Calculates the absolute value of the difference of two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
        </member>
        <member name="M:DogSE.Common.MathHelper.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">Source position.</param>
            <param name="tangent1">Source tangent.</param>
            <param name="value2">Source position.</param>
            <param name="tangent2">Source tangent.</param>
            <param name="amount">Weighting factor.</param>
        </member>
        <member name="M:DogSE.Common.MathHelper.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
        </member>
        <member name="M:DogSE.Common.MathHelper.Max(System.Single,System.Single)">
            <summary>
            Returns the greater of two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
        </member>
        <member name="M:DogSE.Common.MathHelper.Min(System.Single,System.Single)">
            <summary>
            Returns the lesser of two values.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
        </member>
        <member name="M:DogSE.Common.MathHelper.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values using a cubic equation.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Weighting value.</param>
        </member>
        <member name="M:DogSE.Common.MathHelper.ToDegrees(System.Single)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radians">The angle in radians.</param>
        </member>
        <member name="M:DogSE.Common.MathHelper.ToRadians(System.Single)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">The angle in degrees.</param>
        </member>
        <member name="M:DogSE.Common.MathHelper.WrapAngle(System.Single)">
            <summary>
            Reduces a given angle to a value between π and -π.
            </summary>
            <param name="angle">The angle to reduce, in radians.</param>
        </member>
    </members>
</doc>
