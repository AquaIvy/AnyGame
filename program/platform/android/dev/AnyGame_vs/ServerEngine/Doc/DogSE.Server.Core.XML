<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DogSE.Server.Core</name>
    </assembly>
    <members>
        <member name="T:DogSE.Server.Core.Common.GMCommand">
            <summary>
            GM 命令行管理类
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Common.GMCommand.map">
            <summary>
            命令字典
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Common.GMCommand.AddNetCommand(System.String,System.Func{DogSE.Server.Core.Net.NetState,System.String[],System.Boolean})">
            <summary>
            添加一个网络触发的gm命令
            不用考虑注销，如果重新调用，会替换之前的引用
            </summary>
            <param name="name"></param>
            <param name="fun"></param>
        </member>
        <member name="M:DogSE.Server.Core.Common.GMCommand.GetCommandFun(System.String)">
            <summary>
            获得一个gm指令对应的方法
            </summary>
            <param name="commandName"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Common.GMCommand.RegisterConsoleCommand(System.String,DogSE.Server.Core.GameServerService.CommandCallbackDelegate)">
            <summary>
            注册一个控制台的GM指令
            方法同 GameServerService.RegisterConsoleCommand 一致
            只不过多放一个地方，方便调用而已
            </summary>
            <param name="commandName"></param>
            <param name="fun"></param>
        </member>
        <member name="T:DogSE.Server.Core.Config.KeyValueConfigManger">
            <summary>
                键值对配置管理
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Config.KeyValueConfigManger.ToMap``2(``1[],System.Func{``1,``0})">
            <summary>
            将一个数组转为一个字典
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="values"></param>
            <param name="fun"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Config.KeyValueConfigManger.GetValue(System.String)">
            <summary>
                根据Key 获得字符串
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Config.KeyValueConfigManger.ContainsKey(System.String)">
            <summary>
            判断key是否在配置里
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Config.KeyValueConfigManger.UpdateTemplate">
            <summary>
            更新模板数据
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Config.KeyValueConfigManger.AddUpdateItem(DogSE.Server.Core.Config.KeyValueItem)">
            <summary>
            添加一个更新项
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DogSE.Server.Core.Config.KeyValueConfigManger.GetKeyList">
            <summary>
            获得key的列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:DogSE.Server.Core.Config.KeyValueItem">
            <summary>
                键值项
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Config.KeyValueItem.ClearAndUpdate">
            <summary>
            清理数据并更新数据
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Config.KeyValueItem.#ctor(System.String,System.Int32)">
            <summary>
                创建一个int类型的数据
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:DogSE.Server.Core.Config.KeyValueItem.GetInt">
            <summary>
                获得Int数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Config.KeyValueItem.#ctor(System.String,System.Double)">
            <summary>
                创建一个double类型的数据
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:DogSE.Server.Core.Config.KeyValueItem.GetDouble">
            <summary>
                获得Double数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Config.KeyValueItem.#ctor(System.String,System.String)">
            <summary>
                创建一个string类型的数据
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:DogSE.Server.Core.Config.KeyValueItem.GetString">
            <summary>
                获得Double数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Config.KeyValueItem.#ctor(System.String,System.Int32[])">
            <summary>
                创建一个int[] 类型的数据
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:DogSE.Server.Core.Config.KeyValueItem.GetIntArray">
            <summary>
                获得Int数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Config.KeyValueItem.#ctor(System.String,System.Double[])">
            <summary>
                创建一个Double[] 类型的数据
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:DogSE.Server.Core.Config.KeyValueItem.GetDoubleArray">
            <summary>
                获得Double数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Config.KeyValueItem.#ctor(System.String,System.String[])">
            <summary>
                创建一个int[] 类型的数据
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:DogSE.Server.Core.Config.KeyValueItem.GetStringArray">
            <summary>
                获得Int数据
            </summary>
            <returns></returns>
        </member>
        <member name="P:DogSE.Server.Core.Config.KeyValueItem.Key">
            <summary>
                键值项
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Config.GlobalData">
            <summary>
                全局数据
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Config.GlobalData.Key">
            <summary>
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Config.GlobalData.Value">
            <summary>
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Config.DynamicConfigFileManager">
            <summary>
            动态配置文件管理
            主要是xml格式的配置业务逻辑数据的加载
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Config.DynamicConfigFileManager.GetConfigData``1(System.String)">
            <summary>
            获得一个配置数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="componentId"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Config.DynamicConfigFileManager.GetConfigData``1">
            <summary>
            获得一个配置数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Config.DynamicConfigFileManager.LoadData(System.String)">
            <summary>
            初始化配置信息
            </summary>
            <param name="folder">配置文件的目录，不填写时，采用项目的根目录</param>
        </member>
        <member name="M:DogSE.Server.Core.Config.DynamicConfigFileManager.LoadXmlConfig(System.String)">
            <summary>
            加载xml的配置文件
            </summary>
            <param name="folder">配置文件的目录，不填写时，采用项目的根目录</param>
        </member>
        <member name="M:DogSE.Server.Core.Config.DynamicConfigFileManager.LoadCSVConfig(System.String)">
            <summary>
            加载csv的配置文件
            </summary>
            <param name="folder">配置文件的目录，不填写时，采用项目的根目录</param>
        </member>
        <member name="T:DogSE.Server.Core.Config.ServerConfig">
            <summary>
            服务器的配置文件项
            </summary>
            <remarks>
            如果定义了root节点，则节点下的静态属性才会进行反射
            如果属性也是一个对象，而非数值，
            则会创建该对象，对象也将以实例方式存在。
            </remarks>
        </member>
        <member name="P:DogSE.Server.Core.Config.ServerConfig.Tcp">
            <summary>
            服务器的tcp配置
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Config.ServerConfig.ServerId">
            <summary>
            服务器id
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Config.ServerConfig.LogLevel">
            <summary>
            日志等级
            </summary>
            <remarks>
            注意，这里只是负责从配置文件里读取
            真正配置日志的时候，需要把这个字符串转为对应的枚举值
            </remarks>
        </member>
        <member name="P:DogSE.Server.Core.Config.ServerConfig.CheckOfflinePlayerTimeSpan">
            <summary>
            间隔多久清理一次不在线的玩家
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Config.ServerConfig.PlayerClearTime">
            <summary>
            清理玩家离线的间隔
            单位：秒
            最小 60, 标示玩家离线后，60s数据才有可能被移除Cache
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Config.TcpConfig">
            <summary>
            服务器的tcp配置
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Config.TcpConfig.Host">
            <summary>
            主机对外的地址
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Config.TcpConfig.Port">
            <summary>
            开放的端口号
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Config.StaticConfigFileManager">
            <summary>
            静态文件配置文件管理
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Config.StaticConfigFileManager.isLoaded">
            <summary>
            是否已经加载过文件
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Config.StaticConfigFileManager.LoadData(System.Boolean)">
            <summary>
            加载静态配置文件
            </summary>
            <param name="reLoad">
            是否重新加载
            如果reload = true，则不管之前是否加载过配置文件，都重新进行一次加载
            否则会验证之前是否加载过，如果加载过则不再进行加载
            </param>
        </member>
        <member name="T:DogSE.Server.Core.Config.StaticXmlConfigRootAttribute">
            <summary>
            配置文件根节点项，只能给类的根节点用
            </summary>
            <remarks>
            FileName：是配置文件的名字，配置文件可以由多个静态配置类共享
            RootName: 当前静态配置类属性在配置文件的根节点名称，如果未配置，则为对象名
            </remarks>
        </member>
        <member name="M:DogSE.Server.Core.Config.StaticXmlConfigRootAttribute.#ctor(System.String)">
            <summary>
            静态配置文件根节点项
            </summary>
            <param name="fileName">配置文件的文件名</param>
        </member>
        <member name="P:DogSE.Server.Core.Config.StaticXmlConfigRootAttribute.FileName">
            <summary>
            配置文件的文件名
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Config.StaticXmlConfigRootAttribute.RootName">
            <summary>
            xml节点的根节点名称，如果未赋值，则根节点为对象的名字
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Config.DynamicXmlConfigRootAttribute">
            <summary>
            动态数据的配置节点项
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Config.DynamicXmlConfigRootAttribute.#ctor(System.String,System.String)">
            <summary>
            动态数据配置文件根节点项
            </summary>
            <param name="fileName">配置文件的文件名</param>
            <param name="componentName">配置名字</param>
        </member>
        <member name="P:DogSE.Server.Core.Config.DynamicXmlConfigRootAttribute.FileName">
            <summary>
            配置文件的文件名
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Config.DynamicXmlConfigRootAttribute.ComponentName">
            <summary>
            在管理数据里读取的配置名字
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Config.DynamicCSVConfigRootAttribute">
            <summary>
            动态数据的配置节点项
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Config.DynamicCSVConfigRootAttribute.#ctor(System.String,System.String)">
            <summary>
            动态数据配置文件根节点项
            </summary>
            <param name="fileName">配置文件的文件名</param>
            <param name="componentName">配置名字</param>
        </member>
        <member name="P:DogSE.Server.Core.Config.DynamicCSVConfigRootAttribute.FileName">
            <summary>
            配置文件的文件名
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Config.DynamicCSVConfigRootAttribute.ComponentName">
            <summary>
            在管理数据里读取的配置名字
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Config.XmlConfigAttribute">
            <summary>
            配置文件节点项
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Config.XmlConfigAttribute.Name">
            <summary>
            节点名字
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Config.IngortXmlConfigAttribute">
            <summary>
            忽略的配置节点项
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Entity.HotDataManager`1">
            <summary>
            内存里的热点数据管理
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Entity.HotDataManager`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="P:DogSE.Server.Core.Entity.HotDataManager`1.Count">
            <summary>
            当前缓存的数据
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Entity.HotDataManager`1.GetEntity(System.Int32)">
            <summary>
            获得一个实例数据
            如果不存在，返回空
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Entity.HotDataManager`1.GetEntitys">
            <summary>
            获得所有的实例数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Entity.HotDataManager`1.ToString">
            <summary>
            输出当前的状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Entity.HotDataManager`1.AddOrReplace(`0)">
            <summary>
            添加或者替换某个实例数据
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:DogSE.Server.Core.Entity.HotDataManager`1.Unlock(`0)">
            <summary>
            解除某个数据的锁定
            加锁是在AddOrReplace里进行的
            </summary>
            <param name="entity"></param>
        </member>
        <member name="F:DogSE.Server.Core.Entity.HotDataManager`1.opLock">
            <summary>
            操作锁
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Entity.HotDataManager`1.Remove(System.Int32[])">
            <summary>
            移除某个数据
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:DogSE.Server.Core.Entity.HotDataManager`1.Clear(System.Int32,System.Func{`0,System.DateTime,System.Boolean})">
            <summary>
            清理缓存数据
            清理 time 之前使用的数据
            默认清除一天的之前的数据
            </summary>
            <param name="time">
            单位秒
            </param>
            <param name="checkIsUnLock">检查某个被锁住的对象，是否还处于解锁状态</param>
            <returns>
            返回被移除的id列表
            </returns>
        </member>
        <member name="F:DogSE.Server.Core.Entity.HotDataManager`1.Entity.LastUseTime">
            <summary>
            最后一次使用时间
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Entity.HotDataManager`1.Entity.IsLock">
            <summary>
            是否锁定
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Entity.HotDataManager`1.Entity.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.ServerStateType">
            <summary>
             服务器状态类型
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.ServerStateType.Starting">
            <summary>
            启动中
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.ServerStateType.Runing">
            <summary>
            运行中
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.ServerStateType.Closing">
            <summary>
            关闭中
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.ServerMaintainStatus">
            <summary>
            服务器维护状态
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.ServerMaintainStatus.Opening">
            <summary>
            开启中
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.ServerMaintainStatus.Maintain">
            <summary>
            维护中
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.GameServerService">
            <summary>
                游戏服务器服务
                这个是整个游戏的入口事件以及基本操作处理流程
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.GameServerService.FirstInit">
            <summary>
                最初的配置（一般用于初始化配置文件）
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.GameServerService.InitTemplate">
            <summary>
                初始化目标文件
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.GameServerService.LoadDefaultGameData">
            <summary>
                加载基础数据
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.GameServerService.BeforeModuleInit">
            <summary>
                模块初始化前
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.GameServerService.AfterModuleInit">
            <summary>
                模块初始化后
            </summary>
            <remarks>
                这个时候socket已经打开了
            </remarks>
        </member>
        <member name="F:DogSE.Server.Core.GameServerService.BeforeStopListen">
            <summary>
                停止监听(开始停止游戏服务器进程)
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.GameServerService.AfterStopListen">
            <summary>
                停止游戏（服务器完全停止前做最后的清理工作）
            例如等待某些需要退出的线程完成最后的清理工作
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.GameServerService.GetWorldInstatnce">
            <summary>
            获得当前游戏世界实例
            </summary>
            <returns></returns>
        </member>
        <member name="P:DogSE.Server.Core.GameServerService.IsConsoleRun">
            <summary>
                是否是控制台运行（默认是否）
                如果是控制台运行
                则会StartGame执行后不会退出
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.GameServerService.StartGame(DogSE.Server.Core.WorldBase)">
            <summary>
                开启游戏
            </summary>
            <remarks>
                游戏启动执行顺序
                1.FirstInit
                2.InitTemplate
                3.LoadDefaultGameData
                4.BeforeModuleInit
                5.world.Start()
                6.AfterModuleInit
            </remarks>
            <param name="world"></param>
        </member>
        <member name="T:DogSE.Server.Core.GameServerService.CommandCallbackDelegate">
            <summary>
            命令行命令回调. 当控制台收到命令后回调该函数.
            </summary>
            <param name="cmdStr">命令字符串. 必须的.</param>
            <returns>如果要求控制台继续执行则返回true; 否则返回false.</returns>
        </member>
        <member name="M:DogSE.Server.Core.GameServerService.RegisterConsoleCommand(System.String,DogSE.Server.Core.GameServerService.CommandCallbackDelegate)">
            <summary>
            向控制台注册一个控制台命令
            </summary>
            <param name="commandName">控制台名称</param>
            <param name="fun">回调方法</param>
        </member>
        <member name="P:DogSE.Server.Core.GameServerService.RunType">
            <summary>
            服务器是否处于关闭状态
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.GameServerService.MaintainStatus">
            <summary>
            维护状态
            一般来说，进入维护状态后
            普通玩家就不运行进入游戏
            但是GM账号的玩家还是可以进入的
            这里只记录状态，相关禁止进入由逻辑模块进行
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.GameServerService.StartCommandlinesDisposal">
            <summary>
            8 - 2) 开始命令行(在主线程处理)
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.GameServerService.StopGame">
            <summary>
                停止游戏
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.LogicModule.ILogicModule">
            <summary>
            逻辑模块公开接口
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.LogicModule.ILogicModule.ModuleId">
            <summary>
            模块的ID（名字）
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.LogicModule.ILogicModule.Initializationing">
            <summary>
            模块初始化中
            和模块相关的控制器 Controller 在这里初始化
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.LogicModule.ILogicModule.Initializationed">
            <summary>
            模块初始化结束
            和模块相关的事件在这里初始化
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.LogicModule.ILogicModule.ReLoadTemplate">
            <summary>
            重新加载模板（内部重新初始化）
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.LogicModule.ILogicModule.Release">
            <summary>
            服务器停止时释放资源
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.LogicModule.LogicModuleManager">
            <summary>
            逻辑模块管理
            </summary>
            <remarks>
            功能模块的初始化需要在静态模板加载完成后才进行
            因为功能的加载依赖于已经初始化好的模板数据
            
            ReLoadTemplate() 
            方法主要用于服务器动态更新数据后使用
            </remarks>
        </member>
        <member name="F:DogSE.Server.Core.LogicModule.LogicModuleManager.modules">
            <summary>
            当前系统加载的逻辑模块
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.LogicModule.LogicModuleManager.Initializationing">
            <summary>
            初始化Logic modules
            </summary>
            <remarks>
            方法在 InitOnceServer_Step1() 里被调用
            </remarks>
        </member>
        <member name="M:DogSE.Server.Core.LogicModule.LogicModuleManager.Initializationed">
            <summary>
            初始化所有的逻辑模块
            </summary>
            <remarks>
            注意方法会在 InitOnceServer_Step2 里被调用
            </remarks>
        </member>
        <member name="M:DogSE.Server.Core.LogicModule.LogicModuleManager.ReLoadTemplate">
            <summary>
            重新加载模板文件后的逻辑处理
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.LogicModule.LogicModuleManager.Release">
            <summary>
            推出时释放逻辑模块
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.LogicModule.LogicModuleManager.GetModule(System.String)">
            <summary>
            通过模块ID来获得模块实例
            </summary>
            <param name="moduleId"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.LogicModule.LogicModuleManager.GetModules">
            <summary>
            获得当前管理器里所有的模块
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.LogicModule.InitDependenceAttribute">
            <summary>
            逻辑模块的依赖（初始化依赖）
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.LogicModule.InitDependenceAttribute.#ctor(System.String[])">
            <summary>
            模块的依赖
            </summary>
            <param name="moduleNames"></param>
        </member>
        <member name="P:DogSE.Server.Core.LogicModule.InitDependenceAttribute.Dependences">
            <summary>
            依赖模块的模块名
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.LogicModule.IgnoreInitializationAttribute">
            <summary>
            模块不进行初始化，在正式发布项目里，如果要屏蔽某个模块，可以用给模块打这个标签
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Net.NetState">
            <summary>
            
            </summary>
            <summary>
            网络的主状态,每个连接都会产生新的NetState
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.RegisterComponent``1(System.String,``0)">
            <summary>
            注册一个组件数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="componentId">组件ID</param>
            <param name="component">组件实例（非空）</param>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.GetComponent``1(System.String)">
            <summary>
            获得一个组件数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="componentId">组件ID</param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.ReleaseComponent``1">
            <summary>
            释放组件的资源
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetState.Player">
            <summary>
            和网络连接关联的对象
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.GetIP">
            <summary>
            获得网络连接的ip地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.#ctor(DogSE.Server.Net.ClientSession{DogSE.Server.Core.Net.NetState},DogSE.Server.Core.WorldBase)">
            <summary>
            有实例产生时调用
            </summary>
            <param name="clientSocket"></param>
            <param name="world"></param>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.#ctor">
            <summary>
            无效实例产生时调用
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetState.World">
            <summary>
            网络对象连接到的网络世界
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.NetState.m_Serial">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetState.Serial">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetState.ConnectedOn">
            <summary>
            客户开始连接的时间
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetState.ConnectedFor">
            <summary>
            客户总共连接的时间
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.NetState.m_NetAddress">
            <summary>
            客户的地址
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetState.NetAddress">
            <summary>
            客户的地址
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.NetState.m_Running">
            <summary>
            客户是否在运行
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetState.Running">
            <summary>
            客户是否在运行, 如果没有表示已经断开了连接
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.NetState.m_Socket">
            <summary>
            网络句柄
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetState.NetSocket">
            <summary>
            客户端连接的句柄
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetState.ReceiveBuffer">
            <summary>
            接收到的环形缓冲区
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.NetState.m_bCheckAlive">
            <summary>
            是否检查网络活动
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetState.IsCheckActivity">
            <summary>
            是否检查网络活动
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetState.IsVerifyLogin">
            <summary>
            是否验证过账户
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetState.BizId">
            <summary>
            业务逻辑id（通常是和连接绑定的账户/玩家 id，这个需要由业务逻辑层来进行修改）
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.Start">
            <summary>
            开始运行客户端的处理
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.JoinWorld">
            <summary>
            进入World集合,在Start中调用
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.ExitWorld">
            <summary>
            退出World集合,在BaseWorld中调用
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.NetState.m_NextCheckActivity">
            <summary>
            检查是否在线的时间段
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.CheckAlive">
            <summary>
            检查用户是否在线,根据用户传输数据包的时间来判定
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.Send(DogSE.Server.Core.Net.Packet)">
            <summary>
            发送数据(在多线程中主要实现了顺序的发送)
            </summary>
            <param name="packet">需要发送的数据包</param>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.Send(DogSE.Server.Core.Net.PacketWriter)">
            <summary>
            根据输出流来写数据
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetState.IsBatchNow">
            <summary>
            是否处于批量发送中
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.BeginBatch">
            <summary>
            开始进行批量发送
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.EndBatch">
            <summary>
            结束批量发送
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.NetState.DISCONNECT_SECOND">
            <summary>
            
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.Dispose">
            <summary>
            清理当前的网络数据,并断开连接(Flush == true 则默认5秒以后断开)
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.NetState.m_Disposed">
            <summary>
            是否已经处理过断开
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.InsideDispose">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.Dispose(System.Boolean,System.Int64)">
            <summary>
            清理当前的网络数据,并断开连接
            </summary>
            <param name="bFlush"></param>
            <param name="waitSeconds"></param>
        </member>
        <member name="F:DogSE.Server.Core.Net.NetState.m_IPToString">
            <summary>
            当前实例的IP地址字符串
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.ToString">
            <summary>
            当前实例的IP地址字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.OnReceive">
            <summary>
            
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetState.OnDisconnect">
            <summary>
            调用ClientSocketHandler.CloseSocket(...)的时候会产生此调用
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetState.Empty">
            <summary>
            NetState 的空对象，用来做默认填充物使用的
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetState.ErrorCount">
            <summary>
            错误数量
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Net.WhiteList">
            <summary>
            白名单
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.WhiteList.IsEnable">
            <summary>
            是否开启白名单
            默认为flase
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.WhiteList.Contains(System.String)">
            <summary>
            判断ip是否在白名单里
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.WhiteList.Append(System.String[])">
            <summary>
            追加一批白名单
            </summary>
            <param name="ips"></param>
        </member>
        <member name="M:DogSE.Server.Core.Net.WhiteList.Clear">
            <summary>
            清理白名单里的数据
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.WhiteList.LoadWhiteListFile(System.String)">
            <summary>
            加载白名单的配置文件
            </summary>
            <remarks>
            文件为文本文件
            字符串格式的ip地址 192.168.1.1
            每行一个ip
            </remarks>
        </member>
        <member name="T:DogSE.Server.Core.Net.NetStateManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.NetStateManager.HANDLER_CAPACITY_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetStateManager.Count">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.NetStateManager.m_ExclusiveSerial">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetStateManager.ExclusiveSerial">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.NetStateManager.s_SendMaxSize1Sec">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetStateManager.SendMaxSize1Sec">
            <summary>
            每秒最大的传输率
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.NetStateManager.s_SendCachedMaxSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetStateManager.SendCachedMaxSize">
            <summary>
            允许最大的传输率堆积率
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.NetStateManager.s_ReceiveCachedMaxSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.NetStateManager.ReceiveCachedMaxSize">
            <summary>
            允许最大的接收堆积率
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.NetStateManager.m_NetStates">
            <summary>
            网络客户端的集合
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetStateManager.InternalAddNetState(System.Int64,DogSE.Server.Core.Net.NetState)">
            <summary>
            添加客户端到集合
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetStateManager.InternalRemoveNetState(System.Int64)">
            <summary>
            在客户端的集合内删除某客户端
            </summary>
            <param name="netStateId"></param>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetStateManager.GetNetState(System.Int64)">
            <summary>
            在客户端的集合内删除某客户端
            </summary>
            <param name="netStateId"></param>
        </member>
        <member name="M:DogSE.Server.Core.Net.NetStateManager.ToArray">
            <summary>
            全部网络客户端的数组
            </summary>
            <returns></returns>
        </member>
        <member name="T:DogSE.Server.Core.Net.PacketProfile">
            <summary>
            数据包的详细信息
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.PacketProfile.m_Count">
            <summary>
            计算了的次数
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.PacketProfile.m_Constructed">
            <summary>
            构造的次数
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.PacketProfile.m_TotalByteLength">
            <summary>
            总共的处理字节
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.PacketProfile.m_Outgoing">
            <summary>
            是Outgoing还是Incoming
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.PacketProfile.m_TotalProcTime">
            <summary>
            总共的处理时间
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.PacketProfile.m_PeakProcTime">
            <summary>
            最高的处理时间
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketProfile.#ctor(System.Boolean)">
            <summary>
            包的信息
            </summary>
            <param name="bOutgoing">是输入包还是输出包</param>
        </member>
        <member name="P:DogSE.Server.Core.Net.PacketProfile.Outgoing">
            <summary>
            输入还是输出包
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.PacketProfile.Constructed">
            <summary>
            构造的次数
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.PacketProfile.TotalByteLength">
            <summary>
            总共的处理字节
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.PacketProfile.TotalProcTime">
            <summary>
            总共的处理时间
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.PacketProfile.PeakProcTime">
            <summary>
            最高的处理时间
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.PacketProfile.Count">
            <summary>
            计算了的次数
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.PacketProfile.AverageByteLength">
            <summary>
            平均的处理字节
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.PacketProfile.AverageProcTime">
            <summary>
            平均的处理时间
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketProfile.Record(System.Int64,System.TimeSpan)">
            <summary>
            计算
            </summary>
            <param name="iByteLength"></param>
            <param name="processTime"></param>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketProfile.Record(System.Int64)">
            <summary>
            计算
            </summary>
            <param name="iByteLength"></param>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketProfile.RegConstruct">
            <summary>
            该类的构造了的次数
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.PacketProfile.s_OutgoingProfiles">
            <summary>
            
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketProfile.GetOutgoingProfile(System.Int64)">
            <summary>
            给出当前输出包ID的包属性
            </summary>
            <param name="iPacketID">数据包的ID</param>
            <returns>返回当前包ID的包属性</returns>
        </member>
        <member name="F:DogSE.Server.Core.Net.PacketProfile.s_IncomingProfiles">
            <summary>
            
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketProfile.GetIncomingProfile(System.Int64)">
            <summary>
            给出当前输入包ID的包属性
            </summary>
            <param name="iPacketID">数据包的ID</param>
            <returns>返回当前包ID的包属性</returns>
        </member>
        <member name="T:DogSE.Server.Core.Net.Endian">
            <summary>
            计算机如何存储大数值的体系结构
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.Endian.LITTLE_ENDIAN">
            <summary>
             Intel x86，AMD64，DEC VAX
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.Endian.BIG_ENDIAN">
            <summary>
            Sun SPARC, Motorola 68000，Java Virtual Machine
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Net.PacketReader">
            <summary>
            数据包的数据读取
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.SetBuffer(DogSE.Server.Net.DogBuffer)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.#ctor">
            <summary>
            写入留包
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.AcquireContent(DogSE.Server.Net.DogBuffer)">
            <summary>
            从缓冲池里分配一个消息包
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.ReleaseContent(DogSE.Server.Core.Net.PacketReader)">
            <summary>
            回收一个写留包
            </summary>
            <param name="packat"></param>
        </member>
        <member name="F:DogSE.Server.Core.Net.PacketReader.m_Data">
            <summary>
            数据缓存
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.PacketReader.Buffer">
            <summary>
            数据缓存
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.PacketReader.m_Size">
            <summary>
            数据缓存内的实际数据的大小
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.PacketReader.Size">
            <summary>
            数据缓存内的实际数据的大小
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.PacketReader.m_Index">
            <summary>
            数据缓存的实际数据的索引
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.PacketReader.Position">
            <summary>
            数据缓存的实际数据的索引
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.PacketReader.m_Endian">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.PacketReader.Endian">
            <summary>
            
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            
            </summary>
            <param name="iOffset"></param>
            <param name="seekOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.ReadLong64">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.ReadInt32">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.ReadInt16">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.ReadByte">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.ReadULong64">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.ReadUInt32">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.ReadUInt16">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.ReadStruct``1">
            <summary>
            读取一个结构体变量
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.ReadSByte">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.ReadBoolean">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:DogSE.Server.Core.Net.PacketReader.m_ConvertFloat">
            <summary>
            同上
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.ReadFloat">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.ReadBuffer(System.Byte[]@,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.ReadUnicodeStringLE">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.ReadUnicodeStringLESafe">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.ReadUnicodeString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.ReadUnicodeStringSafe">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.ReadUTF8String">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.ReadString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.IsSafeChar(System.Int64)">
            <summary>
            
            </summary>
            <param name="cChar"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.GetPacketID">
            <summary>
            获得消息包id
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketReader.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Net.Packet">
            <summary>
            需发送的数据包的基类
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.Packet.#ctor(System.UInt16)">
            <summary>
            通过调用EnsureCapacity(...)来产生m_Stream
            </summary>
            <param name="iPacketID"></param>
        </member>
        <member name="M:DogSE.Server.Core.Net.Packet.#ctor(System.UInt16,System.Int32)">
            <summary>
            通过调用EnsureCapacity(...)来产生m_Stream
            </summary>
            <param name="iPacketID"></param>
            <param name="len"></param>
        </member>
        <member name="F:DogSE.Server.Core.Net.Packet.m_PacketID">
            <summary>
            输出包的ID
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.Packet.PacketID">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.Packet.m_Stream">
            <summary>
            输出包的输出流
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.Packet.WriterStream">
            <summary>
            输出包的输出流
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.Packet.Endian">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.Packet.m_bIsRelease">
            <summary>
            
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.Packet.Release">
            <summary>
            表示数据已发送完成,释放请求过的加解压缩的内存
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Net.PacketWriter">
            <summary>
            Provides functionality for writing primitive binary data.
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.PacketWriter.m_ConvertFloat">
            <summary>
            float转换器
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.PacketWriter.m_ConvertDouble">
            <summary>
            double转换器
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.#ctor(System.UInt16)">
            <summary>
            数据包写入器
            </summary>
            <param name="codeId">消息报的id</param>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.#ctor">
            <summary>
            写入留包
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.SetNetCode(System.UInt16)">
            <summary>
            设置网络消息码
            </summary>
            <param name="codeId"></param>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.AcquireContent(System.UInt16)">
            <summary>
            从缓冲池里分配一个消息包
            </summary>
            <param name="codeId"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.ReleaseContent(DogSE.Server.Core.Net.PacketWriter)">
            <summary>
            回收一个写留包
            </summary>
            <param name="packat"></param>
        </member>
        <member name="P:DogSE.Server.Core.Net.PacketWriter.Length">
            <summary>
            Gets the total stream length.
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.PacketWriter.m_Endian">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.PacketWriter.Endian">
            <summary>
            
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.FixBuffer(System.Int32)">
            <summary>
            判断并调整缓冲区的大小
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.Write(System.Boolean)">
            <summary>
            Writes a 1-byte boolean value to the underlying stream. False is represented by 0, true by 1.
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.Write(System.Byte)">
            <summary>
            Writes a 1-byte unsigned integer value to the underlying stream.
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.Write(System.SByte)">
            <summary>
            Writes a 1-byte signed integer value to the underlying stream.
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.Write(System.Int16)">
            <summary>
            Writes a 2-byte signed integer value to the underlying stream.
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.Write(System.UInt16)">
            <summary>
            Writes a 2-byte unsigned integer value to the underlying stream.
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.Write(System.Int32)">
            <summary>
            Writes a 4-byte signed integer value to the underlying stream.
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.Write(System.UInt32)">
            <summary>
            Writes a 4-byte unsigned integer value to the underlying stream.
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.Write(System.Single)">
            <summary>
            Writes a 4-byte float value to the underlying stream.
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.Write(System.Int64)">
            <summary>
            Writes a 8-byte long value to the underlying stream.
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.Write(System.UInt64)">
            <summary>
            Writes a 8-byte unsigned long value to the underlying stream.
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.Write(System.Double)">
            <summary>
            Writes a 8-byte double value to the underlying stream.
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the underlying stream
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.WriteStruct``1(``0)">
            <summary>
            将一个结构体写入字节流里
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.WriteAsciiNull(System.String)">
            <summary>
            Writes a dynamic-length ASCII-encoded string value to the underlying stream, followed by a 1-byte null character.
            </summary>
            <param name="strValue"></param>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.WriteLittleUniNull(System.String)">
            <summary>
            Writes a dynamic-length little-endian unicode string value to the underlying stream, followed by a 2-byte null character.
            </summary>
            <param name="strValue"></param>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.WriteBigUniNull(System.String)">
            <summary>
            Writes a dynamic-length big-endian unicode string value to the underlying stream, followed by a 2-byte null character.
            </summary>
            <param name="strValue"></param>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.WriteUTF8Null(System.String)">
            <summary>
            Writes a dynamic-length UTF8 string value to the underlying stream, followed by a 2-byte null character.
            </summary>
            <param name="strValue"></param>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.GetBuffer">
            <summary>
            获得缓冲区数据
            在获得的时候，会根据当前缓冲区的长度，把长度编入首字节的4位
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.PacketWriter.Release">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Net.ReceiveQueue">
            <summary>
            接受到的数据,使用环绕缓冲区来解决粘包和半包的处理
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.ReceiveQueue.BUFFER_SIZE">
            <summary>
            字节默认的大小
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.ReceiveQueue.m_Head">
            <summary>
            字节的头位置
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.ReceiveQueue.m_Tail">
            <summary>
            字节的尾位置
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.ReceiveQueue.m_Buffer">
            <summary>
            字节的数组
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.ReceiveQueue.m_LockBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.ReceiveQueue.m_Size">
            <summary>
            字节的大小
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Net.ReceiveQueue.Length">
            <summary>
            环绕缓冲区内的数据大小
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.ReceiveQueue.Dequeue(System.Byte[],System.Int64,System.Int64)">
            <summary>
            给出使用环绕缓冲区内的数据
            </summary>
            <param name="byteBuffer">要复制到的数据的数组</param>
            <param name="iOffset">要复制到数组的长度偏移量</param>
            <param name="iSize">要复制多少长度的数据</param>
            <returns>返回实际读取到的字节数</returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.ReceiveQueue.Enqueue(System.Byte[],System.Int64,System.Int64)">
            <summary>
            压入数据至环绕缓冲区内
            </summary>
            <param name="byteBuffer"></param>
            <param name="iOffset"></param>
            <param name="iSize"></param>
        </member>
        <member name="M:DogSE.Server.Core.Net.ReceiveQueue.Clear">
            <summary>
            清除数据的信息,不清除数据缓冲,用于下次使用
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.ReceiveQueue.m_Endian">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Net.ReceiveQueue.PacketLengthSize">
            <summary>
            包的长度
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Net.ReceiveQueue.GetPacketLength">
            <summary>
            给出数据包的长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Net.ReceiveQueue.SetCapacityInLock(System.Int64)">
            <summary>
            扩大缓冲数据的大小(当前都在锁中操作，因此不需要锁定的)
            </summary>
            <param name="iCapacity"></param>
        </member>
        <member name="T:DogSE.Server.Core.Protocol.CreateClientProxyCode">
            <summary>
            创建客户端注册代码
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Protocol.CreateClientProxyCode.Register(System.Type)">
            <summary>
            注册一个静态的对象接口
            </summary>
            <param name="staticProxyType"></param>
        </member>
        <member name="T:DogSE.Server.Core.Protocol.CreateProxyCode">
            <summary>
            访问代码创建
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Protocol.CreateProxyCode.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type">要创建的方法的类</param>
        </member>
        <member name="M:DogSE.Server.Core.Protocol.CreateProxyCode.AddMethod(DogSE.Server.Core.Protocol.NetMethodAttribute,System.Reflection.MethodInfo)">
            <summary>
            添加一个方法
            </summary>
            <param name="att"></param>
            <param name="methodinfo"></param>
        </member>
        <member name="M:DogSE.Server.Core.Protocol.CreateProxyCode.GetCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Protocol.CreateProxyCode.CreateCodeAndBuilder">
            <summary>
            创建代码并进行编译
            </summary>
            <returns></returns>
        </member>
        <member name="P:DogSE.Server.Core.Protocol.CreateProxyCode.CompiledAssembly">
            <summary>
            编译后生成的组件
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Protocol.IPacketReader">
            <summary>
            协议包读取
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Protocol.IPacketReader.Read(DogSE.Server.Core.Net.PacketReader)">
            <summary>
            数据读取
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:DogSE.Server.Core.Protocol.IPacketWriter">
            <summary>
            协议包读写入
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Protocol.IPacketWriter.Write(DogSE.Server.Core.Net.PacketWriter)">
            <summary>
            数据写入
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:DogSE.Server.Core.Protocol.IProtoclAutoCode">
            <summary>
            消息自动创建接口
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Protocol.IProtoclAutoCode.Init">
            <summary>
            初始化数据
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Protocol.IProtoclAutoCode.PacketHandlerManager">
            <summary>
            消息管理器
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Protocol.IProtoclAutoCode.SetModule(DogSE.Server.Core.LogicModule.ILogicModule)">
            <summary>
            设置模块对象
            </summary>
            <param name="module"></param>
        </member>
        <member name="T:DogSE.Server.Core.Protocol.CreateReadCode">
            <summary>
            访问代码创建
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Protocol.CreateReadCode.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type">要创建的方法的类</param>
        </member>
        <member name="M:DogSE.Server.Core.Protocol.CreateReadCode.AddMethod(DogSE.Server.Core.Protocol.NetMethodAttribute,System.Reflection.MethodInfo)">
            <summary>
            添加一个方法
            </summary>
            <param name="att"></param>
            <param name="methodinfo"></param>
        </member>
        <member name="M:DogSE.Server.Core.Protocol.CreateReadCode.GetCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Protocol.CreateReadCode.CreateCodeAndBuilder">
            <summary>
            创建代码并进行编译
            </summary>
            <returns></returns>
        </member>
        <member name="P:DogSE.Server.Core.Protocol.CreateReadCode.CompiledAssembly">
            <summary>
            编译后生成的组件
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Protocol.NetReturnDescription">
            <summary>
            网络返回的描叙信息
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Protocol.NetReturnDescription.#ctor(System.String)">
            <summary>
            网络返回的描叙信息
            </summary>
            <param name="description"></param>
        </member>
        <member name="T:DogSE.Server.Core.Protocol.ClientInterfaceAttribute">
            <summary>
            客户端的接口定义标签
            只用来标记，给协议生成工具找到对应的接口
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Protocol.IgnoreAttribute">
            <summary>
            标示忽略不进行序列化的属性
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Protocol.NetMethodAttribute">
            <summary>
            网络回调方法的参数
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Protocol.NetMethodAttribute.#ctor(System.UInt16,DogSE.Server.Core.Protocol.NetMethodType,System.Boolean)">
            <summary>
            网络回调方法
            </summary>
            <param name="opcode">消息码</param>
            <param name="type">消息的处理方法</param>
            <param name="isVerifyLogin">是否进行登录验证，默认是进行的，只有登录等极少数的消息是不需要验证的</param>
        </member>
        <member name="M:DogSE.Server.Core.Protocol.NetMethodAttribute.#ctor(System.UInt16,DogSE.Server.Core.Protocol.NetMethodType,DogSE.Server.Core.Protocol.TaskType,System.Boolean)">
            <summary>
            网络回调方法
            </summary>
            <param name="opcode">消息码</param>
            <param name="type">消息的处理方法</param>
            <param name="taskType">任务分类</param>
            <param name="isVerifyLogin">是否进行登录验证，默认是进行的，只有登录等极少数的消息是不需要验证的</param>
        </member>
        <member name="P:DogSE.Server.Core.Protocol.NetMethodAttribute.OpCode">
            <summary>
            消息码
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Protocol.NetMethodAttribute.MethodType">
            <summary>
            方法类型
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Protocol.NetMethodAttribute.IsVerifyLogin">
            <summary>
            是否进行登录验证
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Protocol.NetMethodAttribute.TaskType">
            <summary>
            任务类型
            </summary>
            <remarks>
            目前任务分类是一个枚举值，有Main,Low,Assist
            决定则这个消息对应的业务逻辑代码在那个线程里执行
            </remarks>
        </member>
        <member name="T:DogSE.Server.Core.Protocol.NetMethodType">
            <summary>
            网络方法的生成类型
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Protocol.NetMethodType.PacketReader">
            <summary>
            方法里一共2个参数
            第二个参数为使用的是数据流，需要自己来解析数据流内容
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Protocol.NetMethodType.ProtocolStruct">
            <summary>
            方法里一共2个参数
            第二个参数为已经定义过解析协议的数据包流对象
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Protocol.NetMethodType.SimpleMethod">
            <summary>
            简单方法，由系统自动帮忙负责解析协议
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Protocol.TaskType">
            <summary>
            任务类型
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Protocol.TaskType.Main">
            <summary>
            主线程任务
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Protocol.TaskType.Low">
            <summary>
            优先级低的线程
            会在某些极端或者特殊情况下数据包会抛弃
            例如：聊天
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Protocol.TaskType.Assist">
            <summary>
            辅助线程
            通常和主线程无关的操作，但是又会对主线程产生影响的操作可以放这里
            但是， 涉及到玩家数据变更的任务，还是需要在主线程里处理
            或者可以先在这里进行初步处理，然后再把后面的数据修改的操作抛到主线程任务执行
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Protocol.RegisterNetMethod">
            <summary>
            注册网络方法到游戏系统里
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Protocol.RegisterNetMethod.#ctor(DogSE.Server.Core.Task.PacketHandlersBase)">
            <summary>
            
            </summary>
            <param name="w"></param>
        </member>
        <member name="M:DogSE.Server.Core.Protocol.RegisterNetMethod.Register(DogSE.Server.Core.LogicModule.ILogicModule[])">
            <summary>
            将方法注册到消息系统里
            </summary>
            <param name="module"></param>
        </member>
        <member name="M:DogSE.Server.Core.Protocol.RegisterNetMethod.Register(DogSE.Server.Core.LogicModule.ILogicModule)">
            <summary>
            将方法注册到消息系统里
            </summary>
            <param name="module"></param>
        </member>
        <member name="T:DogSE.Server.Core.ServerState.IServerState">
            <summary>
            服务器状态
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.ServerState.IServerState.ModuleId">
            <summary>
            模块的ID（名字）
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.ServerState.IServerState.AppendSimpleState(System.IO.StreamWriter)">
            <summary>
            往一个StreamBuilder里写入当前模块的状态数据
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:DogSE.Server.Core.ServerState.IServerState.AppendFullState(System.IO.StreamWriter)">
            <summary>
            写完整的状态数据
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:DogSE.Server.Core.ServerState.ServerStateManager">
            <summary>
            服务器状态管理器
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.ServerState.ServerStateManager.s_modules">
            <summary>
            当前系统加载的逻辑模块
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.ServerState.ServerStateManager.Register(DogSE.Server.Core.ServerState.IServerState)">
            <summary>
            注册一个服务器状态监控模块
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.ServerState.ServerStateManager.WriterSimpleStates">
            <summary>
            写数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.ServerState.ServerStateManager.WriterFullStates">
            <summary>
            写数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:DogSE.Server.Core.TaskT.ActionTaskT`1">
            <summary>
            非网络消息包的任务
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.ActionTaskT`1.Action">
            <summary>
            任务函数
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.ActionTaskT`1.ActionName">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.ActionTaskT`1.Execute">
            <summary>
            执行任务
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.TaskT.ActionTaskT`1.TaskPool">
            <summary>
            任务的对象池
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.ActionTaskT`1.Release">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.ActionTaskT`1.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.ActionTaskT`1.Parent">
            <summary>
            任务管理器
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.ActionTaskT`1.WriteLog(System.Int64,System.Boolean)">
            <summary>
            写日志
            </summary>
            <param name="runTicks"></param>
            <param name="isError"></param>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.ActionTaskT`1.AcquireContent(System.String)">
            <summary>
            从缓冲池里获得一个对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.ActionTaskT`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:DogSE.Server.Core.TaskT.ParamActionTaskT`2">
            <summary>
            带参数的任务
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.ParamActionTaskT`2.ActionName">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.ParamActionTaskT`2.Obj">
            <summary>
            关联对象
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.ParamActionTaskT`2.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.ParamActionTaskT`2.Execute">
            <summary>
            执行任务
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.TaskT.ParamActionTaskT`2.TaskPool">
            <summary>
            任务的对象池
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.ParamActionTaskT`2.Release">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.ParamActionTaskT`2.WriteLog(System.Int64,System.Boolean)">
            <summary>
            写日志
            </summary>
            <param name="runTicks"></param>
            <param name="isError"></param>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.ParamActionTaskT`2.Parent">
            <summary>
            任务管理器
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.ParamActionTaskT`2.AcquireContent(System.String)">
            <summary>
            从缓冲池里获得一个对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:DogSE.Server.Core.TaskT.INetTaskEntity">
            <summary>
            NetTask绑定的实例必须包含的接口参数
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.INetTaskEntity.BizId">
            <summary>
            业务id
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.TaskT.ITaskT`1">
            <summary>
            一个用于执行的任务接口
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.ITaskT`1.Execute">
            <summary>
            执行一个任务
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.ITaskT`1.TaskProfile">
            <summary>
            和任务相关的线程性能对象
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.ITaskT`1.Release">
            <summary>
            释放和任务相关的资源
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.ITaskT`1.WriteLog(System.Int64,System.Boolean)">
            <summary>
            写操作日志
            </summary>
            <param name="runTick"></param>
            <param name="isError"></param>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.ITaskT`1.Parent">
            <summary>
            父节点
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.TaskT.NetTaskT`1">
            <summary>
            网络消息调用任务
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.NetTaskT`1.PacketHandler">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.NetTaskT`1.PacketReader">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.NetTaskT`1.NetState">
            <summary>
            执行的客户端
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.NetTaskT`1.Execute">
            <summary>
            执行网络消息包指令
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.NetTaskT`1.Release">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.NetTaskT`1.Parent">
            <summary>
            任务管理器
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.TaskT.NetTaskT`1.TaskPool">
            <summary>
            任务的对象池
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.NetTaskT`1.AcquireContent(System.UInt16)">
            <summary>
            从缓冲池里获得一个对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.NetTaskT`1.RecvTime">
            <summary>
            消息包的接收时间
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.NetTaskT`1.WriteLog(System.Int64,System.Boolean)">
            <summary>
            写操作日志
            </summary>
            <param name="runTicks"></param>
            <param name="isError"></param>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.NetTaskT`1.ToString">
            <summary>
            输出一些网络状态数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:DogSE.Server.Core.TaskT.PacketHandlersBaseT`1">
            <summary>
            管理全部数据包的调用者
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.TaskT.PacketHandlersBaseT`1.m_Handlers">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.PacketHandlersBaseT`1.Handlers">
            <summary>
            仅用于测试
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.PacketHandlersBaseT`1.Register(System.UInt16,System.Action{`0,DogSE.Server.Core.Net.PacketReader})">
            <summary>
            注册数据包的处理调用者
            注意，如果存在相同的消息id，会进行调用方法的替换操作
            </summary>
            <param name="iPacketID"></param>
            <param name="onPacketReceive"></param>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.PacketHandlersBaseT`1.Register(System.UInt16,DogSE.Server.Core.Protocol.TaskType,System.Action{`0,DogSE.Server.Core.Net.PacketReader})">
            <summary>
            任务类型
            </summary>
            <param name="iPacketID"></param>
            <param name="taskType"></param>
            <param name="onPacketReceive"></param>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.PacketHandlersBaseT`1.Register(System.UInt16,DogSE.Server.Core.Task.PacketPriority,System.Action{`0,DogSE.Server.Core.Net.PacketReader})">
            <summary>
            
            </summary>
            <param name="iPacketID"></param>
            <param name="priority"></param>
            <param name="onPacketReceive"></param>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.PacketHandlersBaseT`1.GetHandler(System.UInt16)">
            <summary>
            获取数据包的处理调用者
            </summary>
            <param name="iPacketID"></param>
            <returns>
            如果消息id对应的消息不存在，则会返回null
            </returns>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.PacketHandlersBaseT`1.RemoveHandler(System.UInt16)">
            <summary>
            移去数据包的处理调用者
            </summary>
            <param name="iPacketID"></param>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.PacketHandlersBaseT`1.Clean">
            <summary>
            清理所有的消息处理句柄
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.TaskT.PacketHandlerT`1">
            <summary>
            数据包的主处理者
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.PacketHandlerT`1.#ctor(System.UInt16,DogSE.Server.Core.Task.PacketPriority,System.Action{`0,DogSE.Server.Core.Net.PacketReader})">
            <summary>
            
            </summary>
            <param name="iPacketID"></param>
            <param name="priority"></param>
            <param name="onPacketReceive"></param>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.PacketHandlerT`1.#ctor(System.UInt16,DogSE.Server.Core.Task.PacketPriority,DogSE.Server.Core.Protocol.TaskType,System.Action{`0,DogSE.Server.Core.Net.PacketReader})">
            <summary>
            
            </summary>
            <param name="iPacketID"></param>
            <param name="priority"></param>
            <param name="taskType"></param>
            <param name="onPacketReceive"></param>
        </member>
        <member name="F:DogSE.Server.Core.TaskT.PacketHandlerT`1.m_PacketID">
            <summary>
            数据包的ID
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.PacketHandlerT`1.PacketID">
            <summary>
            数据包的ID
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.TaskT.PacketHandlerT`1.m_PacketPriority">
            <summary>
            数据包的优先级
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.PacketHandlerT`1.PacketPriority">
            <summary>
            数据包的优先级
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.TaskT.PacketHandlerT`1.m_OnReceive">
            <summary>
            数据实际处理的回调
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.PacketHandlerT`1.OnReceive">
            <summary>
            数据实际处理的回调
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.TaskT.PacketHandlerT`1.m_TaskType">
            <summary>
            数据包的优先级
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.PacketHandlerT`1.TaskType">
            <summary>
            数据包的优先级
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.TaskT.TaskManagerT`1">
            <summary>
            任务管理
            </summary>
            <remarks>
            整个游戏的业务逻辑在这里开辟的线程里执行
            </remarks>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.TaskManagerT`1.#ctor(System.String)">
            <summary>
            任务管理器
            </summary>
            <param name="taskName"></param>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.TaskManagerT`1.AppendTask(DogSE.Server.Core.TaskT.ITaskT{`0})">
            <summary>
            添加一个任务
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.TaskManagerT`1.AppendTask(System.Action)">
            <summary>
            增加一个独立任务
            推荐使用 public void AppendTask(string name, Action action) 方法，方便记录任务的时间
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.TaskManagerT`1.AppendTask(System.String,System.Action)">
            <summary>
            添加一个任务
            </summary>
            <param name="name"></param>
            <param name="action"></param>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.TaskManagerT`1.AppentdTask``1(System.Action{``0},``0)">
            <summary>
            添加一个带参数的任务
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="action"></param>
            <param name="obj">参数</param>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.TaskManagerT`1.AppentdTask``1(System.String,System.Action{``0},``0)">
            <summary>
            添加一个带参数的任务
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="name"></param>
            <param name="action"></param>
            <param name="obj"></param>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.TaskManagerT`1.AppendTask(`0,DogSE.Server.Core.TaskT.PacketHandlerT{`0},DogSE.Server.Core.Net.PacketReader)">
            <summary>
            添加一个网络消息任务
            </summary>
            <param name="netState"></param>
            <param name="handler"></param>
            <param name="packetreader"></param>
        </member>
        <member name="F:DogSE.Server.Core.TaskT.TaskManagerT`1.taskList">
            <summary>
            任务队列
            </summary>
            <remarks>
            这里可以进行优化，用多队列的方式进行优先级划分
            </remarks>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.TaskManagerT`1.StartThread">
            <summary>
            开启任务线程
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.TaskT.TaskManagerT`1.Runing">
            <summary>
            当前的任务线程状态
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.TaskT.TaskManagerT`1.Monitor">
            <summary>
            任务的监控数据
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.TaskManagerT`1.RestartThread">
            <summary>
            重启线程
            在实际运营中，会碰上任务线程进入死循环，或者在等待某些操作的情况
            这时游戏可能进入假死状态，只有中断当前的线程，并重启业务逻辑线程
            才能让游戏继续下去
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.TaskManagerT`1.CheckAndRestart">
            <summary>
            检查任务线程是否有异常，有的话杀掉重来
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.TaskT.TaskManagerT`1.GetWaitCount">
            <summary>
            获得当前正在等待的队列数量
            </summary>
            <returns></returns>
        </member>
        <member name="T:DogSE.Server.Core.Task.ActionTaskCodeRuntimeWriter">
            <summary>
            函数任务执行耗时记录
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.ActionTaskCodeRuntimeWriter.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="taskName"></param>
        </member>
        <member name="M:DogSE.Server.Core.Task.ActionTaskCodeRuntimeWriter.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.ActionTaskCodeRuntimeWriter.OpenFile(System.DateTime)">
            <summary>
            按照某个时间打开一个新的时间文件
            </summary>
            <param name="now"></param>
        </member>
        <member name="M:DogSE.Server.Core.Task.ActionTaskCodeRuntimeWriter.Write(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            记录数据
            </summary>
            <param name="actonName"></param>
            <param name="runTimeTicks"></param>
            <param name="waitTimeTicks"></param>
            <param name="isException">是否抛出异常</param>
        </member>
        <member name="M:DogSE.Server.Core.Task.ActionTaskCodeRuntimeWriter.Flush">
            <summary>
            刷新日志文件
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.ActionTaskCodeRuntimeWriter.Close">
            <summary>
            关闭文件
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Task.NetTaskCodeRuntimeWriter">
            <summary>
            网络任务执行耗时记录
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.NetTaskCodeRuntimeWriter.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="taskName"></param>
        </member>
        <member name="M:DogSE.Server.Core.Task.NetTaskCodeRuntimeWriter.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.NetTaskCodeRuntimeWriter.OpenFile(System.DateTime)">
            <summary>
            按照某个时间打开一个新的时间文件
            </summary>
            <param name="now"></param>
        </member>
        <member name="M:DogSE.Server.Core.Task.NetTaskCodeRuntimeWriter.Write(System.UInt16,System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            记录数据
            </summary>
            <param name="code"></param>
            <param name="playerId">网络接口id（玩家id）</param>
            <param name="runTime"></param>
            <param name="waitTime"></param>
            <param name="isException">是否抛出异常</param>
        </member>
        <member name="M:DogSE.Server.Core.Task.NetTaskCodeRuntimeWriter.Flush">
            <summary>
            刷新日志文件
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.NetTaskCodeRuntimeWriter.Close">
            <summary>
            关闭文件
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Task.TaskMonitor">
            <summary>
            任务监控
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.TaskMonitor.NetTaskCount">
            <summary>
            网络任务执行的次数
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.TaskMonitor.NetTaskRunTicks">
            <summary>
            网络任务执行的毫秒数
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.TaskMonitor.NetTaskDelayTicks">
            <summary>
            网络任务延迟
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.TaskMonitor.NetTaskErrorCount">
            <summary>
            网络任务的异常数据
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.TaskMonitor.ActionTaskCount">
            <summary>
            普通任务执行次数
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.TaskMonitor.ActionTaskRunTicks">
            <summary>
            普通任务执行的毫秒数
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.TaskMonitor.ActionTaskDelayTicks">
            <summary>
            普通任务执行延迟
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.TaskMonitor.ActionTaskErrorCount">
            <summary>
            普通任务异常数据
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Task.ActionTask">
            <summary>
            非网络消息包的任务
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.ActionTask.Action">
            <summary>
            任务函数
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.ActionTask.ActionName">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.ActionTask.Execute">
            <summary>
            执行任务
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.ActionTask.TaskPool">
            <summary>
            任务的对象池
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.ActionTask.Release">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.ActionTask.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.ActionTask.Parent">
            <summary>
            任务管理器
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.ActionTask.WriteLog(System.Int64,System.Boolean)">
            <summary>
            写日志
            </summary>
            <param name="runTicks"></param>
            <param name="isError"></param>
        </member>
        <member name="M:DogSE.Server.Core.Task.ActionTask.AcquireContent(System.String)">
            <summary>
            从缓冲池里获得一个对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Task.ActionTask.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:DogSE.Server.Core.Task.ParamActionTask`1">
            <summary>
            带参数的任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DogSE.Server.Core.Task.ParamActionTask`1.ActionName">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.ParamActionTask`1.Obj">
            <summary>
            关联对象
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.ParamActionTask`1.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.ParamActionTask`1.Execute">
            <summary>
            执行任务
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.ParamActionTask`1.TaskPool">
            <summary>
            任务的对象池
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.ParamActionTask`1.Release">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.ParamActionTask`1.WriteLog(System.Int64,System.Boolean)">
            <summary>
            写日志
            </summary>
            <param name="runTicks"></param>
            <param name="isError"></param>
        </member>
        <member name="P:DogSE.Server.Core.Task.ParamActionTask`1.Parent">
            <summary>
            任务管理器
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.ParamActionTask`1.AcquireContent(System.String)">
            <summary>
            从缓冲池里获得一个对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:DogSE.Server.Core.Task.ActionTaskProfile">
            <summary>
            非网络消息任务的消息执行
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.ActionTaskProfile.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="P:DogSE.Server.Core.Task.ActionTaskProfile.ActionName">
            <summary>
            执行的方法名
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.ActionTaskProfile.Count">
            <summary>
            调用次数
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.ActionTaskProfile.ElapsedTicks">
            <summary>
            总调用时间
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.ActionTaskProfile.MaxElapsedTicks">
            <summary>
            最大执行时间
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.ActionTaskProfile.Error">
            <summary>
            调用次数
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.ActionTaskProfile.AverageProcTime">
            <summary>
            平均的处理时间
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.ActionTaskProfile.Append(System.Int64,System.Boolean)">
            <summary>
            添加一次调用记录
            </summary>
            <param name="ticks"></param>
            <param name="isError"></param>
        </member>
        <member name="M:DogSE.Server.Core.Task.ActionTaskProfile.GetNetTaskProfile(System.String)">
            <summary>
            
            </summary>
            <param name="actionName"></param>
            <returns></returns>
        </member>
        <member name="T:DogSE.Server.Core.Task.ITask">
            <summary>
            一个用于执行的任务接口
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.ITask.Execute">
            <summary>
            执行一个任务
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.ITask.TaskProfile">
            <summary>
            和任务相关的线程性能对象
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.ITask.Release">
            <summary>
            释放和任务相关的资源
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.ITask.WriteLog(System.Int64,System.Boolean)">
            <summary>
            写操作日志
            </summary>
            <param name="runTick"></param>
            <param name="isError"></param>
        </member>
        <member name="P:DogSE.Server.Core.Task.ITask.Parent">
            <summary>
            父节点
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Task.ITaskProfile">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.ITaskProfile.Count">
            <summary>
            调用次数
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.ITaskProfile.ElapsedTicks">
            <summary>
            执行时间的ticks，注意，不是ms，转换为ms需要除1000
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.ITaskProfile.Error">
            <summary>
            执行的错误次数
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.ITaskProfile.Append(System.Int64,System.Boolean)">
            <summary>
            追加一次记录
            </summary>
            <param name="ticks"></param>
            <param name="isError"></param>
        </member>
        <member name="T:DogSE.Server.Core.Task.PacketHandler">
            <summary>
            数据包的主处理者
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.PacketHandler.#ctor(System.UInt16,DogSE.Server.Core.Task.PacketPriority,DogSE.Server.Core.Task.PacketReceiveCallback)">
            <summary>
            
            </summary>
            <param name="iPacketID"></param>
            <param name="priority"></param>
            <param name="onPacketReceive"></param>
        </member>
        <member name="M:DogSE.Server.Core.Task.PacketHandler.#ctor(System.UInt16,DogSE.Server.Core.Task.PacketPriority,DogSE.Server.Core.Protocol.TaskType,DogSE.Server.Core.Task.PacketReceiveCallback)">
            <summary>
            
            </summary>
            <param name="iPacketID"></param>
            <param name="priority"></param>
            <param name="taskType"></param>
            <param name="onPacketReceive"></param>
        </member>
        <member name="F:DogSE.Server.Core.Task.PacketHandler.m_PacketID">
            <summary>
            数据包的ID
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.PacketHandler.PacketID">
            <summary>
            数据包的ID
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.PacketHandler.m_PacketPriority">
            <summary>
            数据包的优先级
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.PacketHandler.PacketPriority">
            <summary>
            数据包的优先级
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.PacketHandler.m_OnReceive">
            <summary>
            数据实际处理的回调
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.PacketHandler.OnReceive">
            <summary>
            数据实际处理的回调
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.PacketHandler.m_TaskType">
            <summary>
            数据包的优先级
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.PacketHandler.TaskType">
            <summary>
            数据包的优先级
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Task.PacketPriority">
            <summary>
            指定 NetState 的发送优先级。
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.PacketPriority.Lowest">
            <summary>
            可以将 NetState 安排在具有任何其他优先级的线程之后。
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.PacketPriority.BelowNormal">
            <summary>
            可以将 System.Threading.Thread 安排在具有 Normal 优先级的线程之后，在具有 Lowest 优先级的线程之前。
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.PacketPriority.Normal">
            <summary>
            可以将 NetState 安排在具有 AboveNormal 优先级的线程之后，在具有 BelowNormal 优先级的线程之前。默认情况下，线程具有 Normal 优先级。
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.PacketPriority.AboveNormal">
            <summary>
            可以将 System.Threading.Thread 安排在具有 Highest 优先级的线程之后，在具有 Normal 优先级的线程之前。
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.PacketPriority.Highest">
            <summary>
            可以将 NetState 安排在具有任何其他优先级的线程之前。
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Task.PacketReceiveCallback">
            <summary>
            消息调用委托
            </summary>
            <param name="netState"></param>
            <param name="reader"></param>
        </member>
        <member name="T:DogSE.Server.Core.Task.PacketHandlersBase">
            <summary>
            管理全部数据包的调用者
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.PacketHandlersBase.m_Handlers">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.PacketHandlersBase.Handlers">
            <summary>
            仅用于测试
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.PacketHandlersBase.Register(System.UInt16,DogSE.Server.Core.Task.PacketReceiveCallback)">
            <summary>
            注册数据包的处理调用者
            注意，如果存在相同的消息id，会进行调用方法的替换操作
            </summary>
            <param name="iPacketID"></param>
            <param name="onPacketReceive"></param>
        </member>
        <member name="M:DogSE.Server.Core.Task.PacketHandlersBase.Register(System.UInt16,DogSE.Server.Core.Protocol.TaskType,DogSE.Server.Core.Task.PacketReceiveCallback)">
            <summary>
            任务类型
            </summary>
            <param name="iPacketID"></param>
            <param name="taskType"></param>
            <param name="onPacketReceive"></param>
        </member>
        <member name="M:DogSE.Server.Core.Task.PacketHandlersBase.Register(System.UInt16,DogSE.Server.Core.Task.PacketPriority,DogSE.Server.Core.Task.PacketReceiveCallback)">
            <summary>
            
            </summary>
            <param name="iPacketID"></param>
            <param name="priority"></param>
            <param name="onPacketReceive"></param>
        </member>
        <member name="M:DogSE.Server.Core.Task.PacketHandlersBase.GetHandler(System.UInt16)">
            <summary>
            获取数据包的处理调用者
            </summary>
            <param name="iPacketID"></param>
            <returns>
            如果消息id对应的消息不存在，则会返回null
            </returns>
        </member>
        <member name="M:DogSE.Server.Core.Task.PacketHandlersBase.RemoveHandler(System.UInt16)">
            <summary>
            移去数据包的处理调用者
            </summary>
            <param name="iPacketID"></param>
        </member>
        <member name="M:DogSE.Server.Core.Task.PacketHandlersBase.Clean">
            <summary>
            清理所有的消息处理句柄
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Task.NetTask">
            <summary>
            网络消息调用任务
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.NetTask.PacketHandler">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.NetTask.PacketReader">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.NetTask.NetState">
            <summary>
            执行的客户端
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.NetTask.Execute">
            <summary>
            执行网络消息包指令
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.NetTask.Release">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.NetTask.Parent">
            <summary>
            任务管理器
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.NetTask.TaskPool">
            <summary>
            任务的对象池
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.NetTask.AcquireContent(System.UInt16)">
            <summary>
            从缓冲池里获得一个对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:DogSE.Server.Core.Task.NetTask.RecvTime">
            <summary>
            消息包的接收时间
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.NetTask.WriteLog(System.Int64,System.Boolean)">
            <summary>
            写操作日志
            </summary>
            <param name="runTicks"></param>
            <param name="isError"></param>
        </member>
        <member name="M:DogSE.Server.Core.Task.NetTask.ToString">
            <summary>
            输出一些网络状态数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:DogSE.Server.Core.Task.NetTaskProfile">
            <summary>
            网络消息报的任务性能计数器
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.NetTaskProfile.#ctor(System.UInt16)">
            <summary>
            
            </summary>
            <param name="packageId"></param>
        </member>
        <member name="P:DogSE.Server.Core.Task.NetTaskProfile.PackageId">
            <summary>
            消息包Id
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.NetTaskProfile.Count">
            <summary>
            调用次数
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.NetTaskProfile.ElapsedTicks">
            <summary>
            总调用时间
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.NetTaskProfile.MaxElapsedTicks">
            <summary>
            最大执行时间
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.NetTaskProfile.AverageProcTime">
            <summary>
            平均的处理时间
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.NetTaskProfile.Error">
            <summary>
            调用次数
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.NetTaskProfile.Append(System.Int64,System.Boolean)">
            <summary>
            添加一次调用记录
            </summary>
            <param name="ticks"></param>
            <param name="isError"></param>
        </member>
        <member name="M:DogSE.Server.Core.Task.NetTaskProfile.GetNetTaskProfile(System.UInt16)">
            <summary>
            
            </summary>
            <param name="packageId"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Task.NetTaskProfile.GetNetTaskProfile">
            <summary>
            获得网络性能监控的对象数组
            </summary>
            <returns></returns>
        </member>
        <member name="T:DogSE.Server.Core.Task.TaskManager">
            <summary>
            任务管理
            </summary>
            <remarks>
            整个游戏的业务逻辑在这里开辟的线程里执行
            </remarks>
        </member>
        <member name="M:DogSE.Server.Core.Task.TaskManager.#ctor(System.String)">
            <summary>
            任务管理器
            </summary>
            <param name="taskName"></param>
        </member>
        <member name="M:DogSE.Server.Core.Task.TaskManager.AppendTask(DogSE.Server.Core.Task.ITask)">
            <summary>
            添加一个任务
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:DogSE.Server.Core.Task.TaskManager.AppendTask(System.Action)">
            <summary>
            增加一个独立任务
            推荐使用 public void AppendTask(string name, Action action) 方法，方便记录任务的时间
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:DogSE.Server.Core.Task.TaskManager.AppendTask(System.String,System.Action)">
            <summary>
            添加一个任务
            </summary>
            <param name="name"></param>
            <param name="action"></param>
        </member>
        <member name="M:DogSE.Server.Core.Task.TaskManager.AppentdTask``1(System.Action{``0},``0)">
            <summary>
            添加一个带参数的任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <param name="obj">参数</param>
        </member>
        <member name="M:DogSE.Server.Core.Task.TaskManager.AppentdTask``1(System.String,System.Action{``0},``0)">
            <summary>
            添加一个带参数的任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="action"></param>
            <param name="obj"></param>
        </member>
        <member name="M:DogSE.Server.Core.Task.TaskManager.AppendTask(DogSE.Server.Core.Net.NetState,DogSE.Server.Core.Task.PacketHandler,DogSE.Server.Core.Net.PacketReader)">
            <summary>
            添加一个网络消息任务
            </summary>
            <param name="netState"></param>
            <param name="handler"></param>
            <param name="packetreader"></param>
        </member>
        <member name="F:DogSE.Server.Core.Task.TaskManager.taskList">
            <summary>
            任务队列
            </summary>
            <remarks>
            这里可以进行优化，用多队列的方式进行优先级划分
            </remarks>
        </member>
        <member name="M:DogSE.Server.Core.Task.TaskManager.StartThread">
            <summary>
            开启任务线程
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Task.TaskManager.Runing">
            <summary>
            当前的任务线程状态
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Task.TaskManager.Monitor">
            <summary>
            任务的监控数据
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.TaskManager.RestartThread">
            <summary>
            重启线程
            在实际运营中，会碰上任务线程进入死循环，或者在等待某些操作的情况
            这时游戏可能进入假死状态，只有中断当前的线程，并重启业务逻辑线程
            才能让游戏继续下去
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.TaskManager.CheckAndRestart">
            <summary>
            检查任务线程是否有异常，有的话杀掉重来
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Task.TaskManager.GetWaitCount">
            <summary>
            获得当前正在等待的队列数量
            </summary>
            <returns></returns>
        </member>
        <member name="T:DogSE.Server.Core.Timer.DelayCallTimer">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.DelayCallTimer.m_Callback">
            <summary>
            委托
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.DelayCallTimer.#ctor(System.TimeSpan,System.TimeSpan,System.Int64,System.TimeSpan,DogSE.Server.Core.Timer.TimeSliceCallback)">
            <summary>
            延迟调用的时间
            </summary>
            <param name="delayTimeSpan">延迟的时间</param>
            <param name="intervalTimeSpan">间隔的时间</param>
            <param name="iTimes">调用的次数</param>
            <param name="timeLeft">剩余时间</param>
            <param name="timerCallback">委托</param>
        </member>
        <member name="P:DogSE.Server.Core.Timer.DelayCallTimer.Callback">
            <summary>
            委托
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.DelayCallTimer.OnTick">
            <summary>
            调用
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.DelayCallTimer.TimeSliceName">
            <summary>
            时间回调名字
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.DelayCallTimer.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:DogSE.Server.Core.Timer.DelayStateCallTimer`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:DogSE.Server.Core.Timer.DelayStateCallTimer`1.m_Callback">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.DelayStateCallTimer`1.m_State">
            <summary>
            
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.DelayStateCallTimer`1.#ctor(System.TimeSpan,System.TimeSpan,System.Int64,System.TimeSpan,DogSE.Server.Core.Timer.TimeSliceStateCallback{`0},`0)">
            <summary>
            延迟调用的时间有状态类
            </summary>
            <param name="iTimes">调用的次数</param>
            <param name="delayTimeSpan">延迟的时间</param>
            <param name="intervalTimeSpan">间隔的时间</param>
            <param name="timerStateCallback">委托</param>
            <param name="timeLeft">剩余时间</param>
            <param name="tState">回调的状态类</param>
        </member>
        <member name="P:DogSE.Server.Core.Timer.DelayStateCallTimer`1.Callback">
            <summary>
            
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.DelayStateCallTimer`1.OnTick">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.DelayStateCallTimer`1.TimeSliceName">
            <summary>
            时间回调名字
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.DelayStateCallTimer`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:DogSE.Server.Core.Timer.TimeSliceCallback">
            <summary>
            时间片的委托
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Timer.TimeSliceStateCallback`1">
            <summary>
            包含指定泛行对象的时间片的委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tState"></param>
        </member>
        <member name="T:DogSE.Server.Core.Timer.StopTimeSliceEventArgs">
            <summary>
            Aura的事件数据类
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.StopTimeSliceEventArgs.#ctor(DogSE.Server.Core.Timer.TimeSlice)">
            <summary>
            初始化构造
            </summary>
            <param name="timeSlice"></param>
        </member>
        <member name="F:DogSE.Server.Core.Timer.StopTimeSliceEventArgs.m_TimeSlice">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.StopTimeSliceEventArgs.TimeSlice">
            <summary>
            
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Timer.TimerFrequency">
            <summary>
            时间片优先级的枚举定义
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerFrequency.EveryTick">
            <summary>
            实时的时间片
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerFrequency.Second">
            <summary>
            秒级别
            在秒级队列，100ms检查一次
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerFrequency.Minute">
            <summary>
            分钟级别
            检查按照1s一次，检查秒级别的数据
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerFrequency.LongTime">
            <summary>
            大于分钟级别的
            先放入等待队列，1分钟检查一次，将他移入秒级别等待队列
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Timer.TimeSliceRunType">
            <summary>
            时间片间隔执行的类型
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimeSliceRunType.None">
            <summary>
            内部线程
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimeSliceRunType.LogicTask">
            <summary>
            业务逻辑线程执行
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Timer.TimerChangeEntry">
            <summary>
            时间片的属性改变
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimerChangeEntry.#ctor(DogSE.Server.Core.Timer.TimeSlice,System.Int64,System.Boolean)">
            <summary>
            
            </summary>
            <param name="tTimer"></param>
            <param name="newIndex"></param>
            <param name="isAdd"></param>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerChangeEntry.m_TimerSlice">
            <summary>
            添加或修改或移去的时间片
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimerChangeEntry.TimerSlice">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerChangeEntry.m_NewPriority">
            <summary>
            新时间片的属性
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimerChangeEntry.TimerPriority">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerChangeEntry.m_IsAddTimerSlice">
            <summary>
            是否是添加还是移去时间片
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimerChangeEntry.AddTimerSlice">
            <summary>
            
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Timer.TimerProfile">
            <summary>
            当前某种Timer(如: Timer, DelayCallTimer, DelayStateCallTimer, DelayStateCallTimer &lt; T &gt; )类型定义的时间片的处理信息
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerProfile.m_Created">
            <summary>
            创建调用的次数
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerProfile.m_Started">
            <summary>
            开始调用的次数
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerProfile.m_Stopped">
            <summary>
            停止调用的次数
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerProfile.m_Ticked">
            <summary>
            调用的次数
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerProfile.m_TotalProcTime">
            <summary>
            总共调用的处理时间
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerProfile.m_PeakProcTime">
            <summary>
            调用的最高处理时间
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimerProfile.Created">
            <summary>
            创建调用的次数
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimerProfile.Started">
            <summary>
            开始调用的次数
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimerProfile.Stopped">
            <summary>
            停止调用的次数
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimerProfile.Ticked">
            <summary>
            调用的次数
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimerProfile.TotalProcTime">
            <summary>
            总共调用的处理时间
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimerProfile.PeakProcTime">
            <summary>
            调用的最高处理时间
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimerProfile.AverageProcTime">
            <summary>
            平均调用的处理时间
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimerProfile.RegCreation">
            <summary>
            计算创建调用的次数
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimerProfile.RegStart">
            <summary>
            计算开始调用的次数
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimerProfile.RegStopped">
            <summary>
            计算停止调用的次数
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimerProfile.RegTicked(System.TimeSpan)">
            <summary>
            计算运行的次数,最高的处理时间,总共调用的处理时间
            </summary>
            <param name="procTime">当前的处理时间</param>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerProfile.s_Profiles">
            <summary>
            TimerProfile处理信息定义,以类型名为关键字共有8种
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimerProfile.Profiles">
            <summary>
            时间片的处理信息定义,以类型名为关键字共有8种
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimerProfile.GetProfile(System.String)">
            <summary>
            给出某种时间片的处理信息
            </summary>
            <returns></returns>
            <param name="name"></param>
        </member>
        <member name="T:DogSE.Server.Core.Timer.TimerThread">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimerThread.MainTask">
            <summary>
            任务管理器
            从外面赋值的任务管理器，视为游戏的主任务队列
            时间调度执行的时候会抛任务到这个主任务队里里
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerThread.s_NextPriorities">
            <summary>
            下一次调用的时间片
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerThread.s_PriorityDelays">
            <summary>
            延迟调用的时间片
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerThread.s_Timers">
            <summary>
            4种时间片的列表
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerThread.s_TimerThread">
            <summary>
            
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimerThread.StartTimerThread">
            <summary>
            如果有实例TimeSlice的时候就开始初始化线程
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimerThread.AddTimer(DogSE.Server.Core.Timer.TimeSlice)">
            <summary>
            添加或修改或移去时间片
            </summary>
            <param name="tTimer"></param>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimerThread.RemoveTimer(DogSE.Server.Core.Timer.TimeSlice)">
            <summary>
            移去时间片
            </summary>
            <param name="tTimer"></param>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerThread.s_Signal">
            <summary>
            当有新的时间片改动或添加或移去的时候事件发生
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimerThread.RunTimerThread">
            <summary>
            Timer的时间检测函数，这里是独立线程
            但只负责检查时间片，不负责任务执行
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerThread.s_TimerChangeEntryChangeQueue">
            <summary>
            改变或添加或移去的时间片
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimerThread.s_LockTimerChangeEntryChangeQueue">
            <summary>
            锁
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimerThread.Change(DogSE.Server.Core.Timer.TimeSlice,System.Int64,System.Boolean)">
            <summary>
            添加或修改或移去的时间片
            </summary>
            <param name="tTimer"></param>
            <param name="newIndex"></param>
            <param name="isAdd"></param>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimerThread.ProcessChangeQueue">
            <summary>
            处理添加或修改或移去的时间片
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Timer.TimeSlice">
            <summary>
            时间片的处理(具有均衡负载的时间片处理)
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSlice.#ctor(System.TimeSpan)">
            <summary>
            初始化时间片
            </summary>
            <param name="delayTimeSpan">延迟的时间</param>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSlice.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            初始化时间片
            </summary>
            <param name="delayTimeSpan">延迟的时间</param>
            <param name="intervalTimeSpan">间隔的时间</param>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSlice.#ctor(System.TimeSpan,System.TimeSpan,System.Int64)">
            <summary>
            初始化时间片
            </summary>
            <param name="delayTimeSpan">延迟的时间</param>
            <param name="intervalTimeSpan">间隔的时间</param>
            <param name="iTimes">调用的次数</param>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSlice.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="delayTimeSpan"></param>
            <param name="intervalTimeSpan"></param>
            <param name="timeLeft">剩余时间</param>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSlice.#ctor(System.TimeSpan,System.TimeSpan,System.Int64,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="delayTimeSpan">第一次启动间隔</param>
            <param name="intervalTimeSpan">每次调用间隔</param>
            <param name="iTimes">累计调用次数</param>
            <param name="timeLeft">剩余时间</param>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimeSlice.m_NumberOfTimes">
            <summary>
            调用次数的累计数
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimeSlice.NumberOfTimes">
            <summary>
            调用次数的累计数
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimeSlice.RunType">
            <summary>
            时间片在哪里执行
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimeSlice.m_Times">
            <summary>
            调用的总次数
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimeSlice.Times">
            <summary>
            调用的总次数
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimeSlice.m_TimeLeft">
            <summary>
            剩余时间
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimeSlice.TimeLeft">
            <summary>
            剩余时间
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimeSlice.m_StopTime">
            <summary>
            剩余时间
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimeSlice.StopTime">
            <summary>
            停止时间
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimeSlice.m_RunFrequency">
            <summary>
            时间片的优先级
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimeSlice.Frequency">
            <summary>
            时间片的优先级
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimeSlice.m_NextTime">
            <summary>
            下一次调用的时间
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimeSlice.NextTime">
            <summary>
            下一次的调用时间
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimeSlice.m_DelayTime">
            <summary>
            延迟调用的时间(只在加入集合时计算一次)
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimeSlice.DelayTime">
            <summary>
            延迟调用的时间间隔(只在加入集合时计算一次)
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimeSlice.m_IntervalTime">
            <summary>
            间隔调用的时间
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimeSlice.IntervalTime">
            <summary>
            间隔调用的时间间隔
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimeSlice.m_Running">
            <summary>
            调用是否在运行(volatile 用于多线程)
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimeSlice.IsRunning">
            <summary>
            调用是否运行
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimeSlice.BaseWorld">
            <summary>
            管理当前的世界服务
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimeSlice.TimeSliceHashSet">
            <summary>
            TimerThread.m_Timers当前某种时间片的引用
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSlice.Start">
            <summary>
            开始时间片的处理
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSlice.Stop">
            <summary>
            停止时间片的处理
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSlice.ToString">
            <summary>
            给出时间片的定义字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSlice.OnTick">
            <summary>
            时间片的处理函数
            </summary>
        </member>
        <member name="E:DogSE.Server.Core.Timer.TimeSlice.StopTimeSlice">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.Timer.TimeSlice.TimeSliceName">
            <summary>
            时间回调方法的名称
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.Timer.TimeSliceUtil">
            <summary>
            时间间隔辅助类
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimeSliceUtil.s_LongTimeCheck">
            <summary>
            超过3分钟等待的放入长时间等待队列
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimeSliceUtil.s_MinuteCheck">
            <summary>
            1分钟以内的100ms检查一次
            </summary>
        </member>
        <member name="F:DogSE.Server.Core.Timer.TimeSliceUtil.s_SecondCheck">
            <summary>
            1s以内的，即时检查
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSliceUtil.ComputePriority(System.TimeSpan)">
            <summary>
            获取时间片的优先级
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSliceUtil.StartTimeSlice(System.TimeSpan,DogSE.Server.Core.Timer.TimeSliceCallback)">
            <summary>
            在 delayTimeSpan 时间结束后调用一次回调函数
            </summary>
            <param name="delayTimeSpan"></param>
            <param name="timerCallback"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSliceUtil.StartTimeSlice(System.TimeSpan,System.TimeSpan,DogSE.Server.Core.Timer.TimeSliceCallback)">
            <summary>
            从 delayTimeSpan 后开始，每隔 intervalTimeSpan 调用一次回调函数，直到游戏退出
            </summary>
            <param name="delayTimeSpan"></param>
            <param name="intervalTimeSpan"></param>
            <param name="timerCallback"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSliceUtil.StartTimeSlice(System.TimeSpan,System.TimeSpan,System.Int64,System.TimeSpan,DogSE.Server.Core.Timer.TimeSliceCallback)">
            <summary>
            从 delayTimeSpan 后开始，每隔 intervalTimeSpan 调用一次回调函数，直到 iTimes 次回调后结束。
            </summary>
            <remarks>
            如果 iTimes == 1则表示调用一次后就结束
            </remarks>
            <param name="delayTimeSpan"></param>
            <param name="intervalTimeSpan"></param>
            <param name="iTimes">调用的次数</param>
            <param name="timerCallback">回调方法</param>
            <param name="timeLeft">剩余时间</param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSliceUtil.StartTimeSlice(System.TimeSpan,System.TimeSpan,System.Int64,DogSE.Server.Core.Timer.TimeSliceCallback)">
            <summary>
            从 delayTimeSpan 后开始，每隔 intervalTimeSpan 调用一次回调函数，直到 iTimes 次回调后结束。
            </summary>
            <param name="delayTimeSpan"></param>
            <param name="intervalTimeSpan"></param>
            <param name="iTimes"></param>
            <param name="timerStateCallback"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSliceUtil.StartTimeSlice(System.TimeSpan,System.TimeSpan,System.TimeSpan,DogSE.Server.Core.Timer.TimeSliceCallback)">
            <summary>
            从 delayTimeSpan 后开始，每隔 intervalTimeSpan 调用一次回调函数，直到超过 timeLeft 的时间。
            </summary>
            <param name="delayTimeSpan"></param>
            <param name="intervalTimeSpan"></param>
            <param name="timeLeft"></param>
            <param name="timerStateCallback"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSliceUtil.StartTimeSlice``1(System.TimeSpan,DogSE.Server.Core.Timer.TimeSliceStateCallback{``0},``0)">
            <summary>
            在 delayTimeSpan 时间结束后调用一次回调函数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="delayTimeSpan"></param>
            <param name="timerStateCallback"></param>
            <param name="tState"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSliceUtil.StartTimeSlice``1(System.TimeSpan,System.TimeSpan,DogSE.Server.Core.Timer.TimeSliceStateCallback{``0},``0)">
            <summary>
            从 delayTimeSpan 后开始，每隔 intervalTimeSpan 调用一次回调函数，直到游戏退出
            </summary>
            <typeparam name="T"></typeparam>
            <param name="delayTimeSpan"></param>
            <param name="intervalTimeSpan"></param>
            <param name="timerStateCallback"></param>
            <param name="tState"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSliceUtil.StartTimeSlice``1(System.TimeSpan,System.TimeSpan,System.Int64,DogSE.Server.Core.Timer.TimeSliceStateCallback{``0},``0)">
            <summary>
            从 delayTimeSpan 后开始，每隔 intervalTimeSpan 调用一次回调函数，直到 iTimes 次回调后结束。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="delayTimeSpan"></param>
            <param name="intervalTimeSpan"></param>
            <param name="iTimes"></param>
            <param name="timerStateCallback"></param>
            <param name="tState"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSliceUtil.StartTimeSlice``1(System.TimeSpan,System.TimeSpan,System.TimeSpan,DogSE.Server.Core.Timer.TimeSliceStateCallback{``0},``0)">
            <summary>
            从 delayTimeSpan 后开始，每隔 intervalTimeSpan 调用一次回调函数，直到超过 timeLeft 的时间。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="delayTimeSpan"></param>
            <param name="intervalTimeSpan"></param>
            <param name="timeLeft"></param>
            <param name="timerStateCallback"></param>
            <param name="tState"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Timer.TimeSliceUtil.StartTimeSlice``1(System.TimeSpan,System.TimeSpan,System.Int64,System.TimeSpan,DogSE.Server.Core.Timer.TimeSliceStateCallback{``0},``0)">
            <summary>
            带优先级从 delayTimeSpan 后开始，每隔 intervalTimeSpan 调用一次回调函数，直到超过 timeLeft 的时间或者回调次数达到 iTimes。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="delayTimeSpan"></param>
            <param name="intervalTimeSpan"></param>
            <param name="iTimes"></param>
            <param name="timeLeft"></param>
            <param name="timerStateCallback"></param>
            <param name="tState"></param>
            <returns></returns>
        </member>
        <member name="T:DogSE.Server.Core.Util.AssemblyUtil">
            <summary>
            程序集的辅助类
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Util.AssemblyUtil.LoadLogicAssemblyInMem(System.String)">
            <summary>
            加载本地目录下的逻辑文件
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.Util.AssemblyUtil.GetAssemblies">
            <summary>
            获得运行时所有的Assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Util.AssemblyUtil.GetTypes">
            <summary>
            获得运行时的所有类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Util.AssemblyUtil.GetTypesByAttribute(System.Type)">
            <summary>
            获得打过指定对象标签的类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Util.AssemblyUtil.GetTypesByInterface(System.Type)">
            <summary>
            获得思想指定接口的类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Util.AssemblyUtil.CreateFromInterface``1">
            <summary>
            根据一个接口，创建实现了这个接口的所有实例
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DogSE.Server.Core.Util.AssemblyUtil.GetAttribute``1(System.Type)">
            <summary>
            获得一个类型下的是否包含有特殊的属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns>如果不存在返回null</returns>
        </member>
        <member name="M:DogSE.Server.Core.Util.AssemblyUtil.GetAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            获得一个类型下的是否包含有特殊的属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns>如果不存在返回null</returns>
        </member>
        <member name="M:DogSE.Server.Core.Util.AssemblyUtil.HasInterface(System.Type,System.Type)">
            <summary>
            判断一个类型是否包含某个接口
            </summary>
            <param name="type"></param>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="T:DogSE.Server.Core.WorldBase">
            <summary>
            基本的游戏世界
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.WorldBase.Listeners">
            <summary>
            游戏世界对应的服务器监听器
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.WorldBase.StartWorld">
            <summary>
            开启游戏世界
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.WorldBase.StopWorld">
            <summary>
            游戏世界停止
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.WorldBase.CheckRunTask">
            <summary>
            检查正在执行的任务是否有异常
            如果有异常，则杀掉任务现场
            争取从异常里恢复
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.WorldBase.InitLogicModule">
            <summary>
            初始化游戏逻辑模块
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.WorldBase.IsAutoRegisterMessage">
            <summary>
            是否自动对逻辑模块自动注册消息处理函数
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.WorldBase.StartServerSocket">
            <summary>
            开始服务器socket，可以开始接收客户端数据
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.WorldBase.OnSocketRecv(System.Object,DogSE.Server.Net.SocketRecvEventArgs{DogSE.Server.Core.Net.NetState})">
            <summary>
            收到网络消息包
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DogSE.Server.Core.WorldBase.OnSocketConnect(System.Object,DogSE.Server.Net.SocketConnectEventArgs{DogSE.Server.Core.Net.NetState})">
            <summary>
            触发Socket的连接事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:DogSE.Server.Core.WorldBase.netStateId">
            <summary>
            NetState的id分配器
            </summary>
        </member>
        <member name="E:DogSE.Server.Core.WorldBase.NetStateConnect">
            <summary>
            网络连接事件
            </summary>
        </member>
        <member name="E:DogSE.Server.Core.WorldBase.NetStateDisconnect">
            <summary>
            网络连接关闭事件
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.WorldBase.PacketHandlers">
            <summary>
            包句柄管理器
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.WorldBase.MainTask">
            <summary>
            对外公开的任务管理器
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.WorldBase.LowTask">
            <summary>
            低级别的任务
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.WorldBase.AssistTask">
            <summary>
            辅助的任务队列
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.WorldBase.UseManyTaskThread">
            <summary>
            是否使用多线程（3个）来处理任务
            false 的话只会存在一个线程队列
            true 会有3个线程队列
            默认是 false
            </summary>
        </member>
        <member name="M:DogSE.Server.Core.WorldBase.GetModules">
            <summary>
            获得逻辑模块
            </summary>
            <returns></returns>
        </member>
        <member name="T:DogSE.Server.Core.NetStateDisconnectEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.NetStateDisconnectEventArgs.NetState">
            <summary>
            网络连接
            </summary>
        </member>
        <member name="T:DogSE.Server.Core.NetStateConnectEventArgs">
            <summary>
            网络连接事件
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.NetStateConnectEventArgs.NetState">
            <summary>
            网络连接
            </summary>
        </member>
        <member name="P:DogSE.Server.Core.NetStateConnectEventArgs.AllowConnect">
            <summary>
            是否允许连接
            </summary>
        </member>
        <member name="T:DogSE.Common.ISerial">
            <summary>
            具备唯一标示的接口
            </summary>
        </member>
        <member name="P:DogSE.Common.ISerial.Serial">
            <summary>
            唯一标示Id
            </summary>
        </member>
        <member name="T:DogSE.Common.IDataEntity">
            <summary>
            用于保存数据的实体类
            </summary>
        </member>
        <member name="P:DogSE.Common.IDataEntity.Id">
            <summary>
            数据实体类的唯一id标示
            </summary>
        </member>
        <member name="T:DogSE.Common.IInitialize">
            <summary>
            当前脚本类需初始化实例
            </summary>
        </member>
        <member name="T:DogSE.Common.IConfigure">
            <summary>
            当前脚本类需配置化实例
            </summary>
        </member>
        <member name="T:DogSE.Common.IRelease">
            <summary>
            当前类的有内存池,可释放自己入内存池
            </summary>
        </member>
        <member name="M:DogSE.Common.IRelease.Release">
            <summary>
            
            </summary>
        </member>
        <member name="T:DogSE.Common.ILock">
            <summary>
            当前类实例的在多线程中需锁定
            </summary>
        </member>
        <member name="M:DogSE.Common.ILock.Lock">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.ILock.Free">
            <summary>
            
            </summary>
        </member>
        <member name="T:DogSE.Common.Serial">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Common.Serial.MinusOne">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Common.Serial.Zero">
            <summary>
            
            </summary>
        </member>
        <member name="M:DogSE.Common.Serial.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="lSerial"></param>
        </member>
        <member name="F:DogSE.Common.Serial.m_Serial">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Common.Serial.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:DogSE.Common.Serial.op_Equality(DogSE.Common.Serial,DogSE.Common.Serial)">
            <summary>
            
            </summary>
            <param name="serialA"></param>
            <param name="serialB"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.op_Inequality(DogSE.Common.Serial,DogSE.Common.Serial)">
            <summary>
            
            </summary>
            <param name="serialA"></param>
            <param name="serialB"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.op_GreaterThan(DogSE.Common.Serial,DogSE.Common.Serial)">
            <summary>
            
            </summary>
            <param name="serialA"></param>
            <param name="serialB"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.op_LessThan(DogSE.Common.Serial,DogSE.Common.Serial)">
            <summary>
            
            </summary>
            <param name="serialA"></param>
            <param name="serialB"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.op_GreaterThanOrEqual(DogSE.Common.Serial,DogSE.Common.Serial)">
            <summary>
            
            </summary>
            <param name="serialA"></param>
            <param name="serialB"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.op_LessThanOrEqual(DogSE.Common.Serial,DogSE.Common.Serial)">
            <summary>
            
            </summary>
            <param name="serialA"></param>
            <param name="serialB"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.op_Implicit(DogSE.Common.Serial)~System.Int64">
            <summary>
            
            </summary>
            <param name="serial"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.op_Explicit(DogSE.Common.Serial)~System.UInt64">
            <summary>
            
            </summary>
            <param name="serial"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.op_Explicit(DogSE.Common.Serial)~System.Int32">
            <summary>
            
            </summary>
            <param name="serial"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.op_Explicit(DogSE.Common.Serial)~System.UInt32">
            <summary>
            
            </summary>
            <param name="serial"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.op_Explicit(DogSE.Common.Serial)~System.Int16">
            <summary>
            
            </summary>
            <param name="serial"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.op_Explicit(DogSE.Common.Serial)~System.UInt16">
            <summary>
            
            </summary>
            <param name="serial"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.op_Explicit(DogSE.Common.Serial)~System.Byte">
            <summary>
            
            </summary>
            <param name="serial"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.op_Explicit(DogSE.Common.Serial)~System.SByte">
            <summary>
            
            </summary>
            <param name="serial"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.op_Implicit(System.Int64)~DogSE.Common.Serial">
            <summary>
            
            </summary>
            <param name="lSerial"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.op_Explicit(System.UInt64)~DogSE.Common.Serial">
            <summary>
            
            </summary>
            <param name="ulSerial"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="xObject"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.Equals(DogSE.Common.Serial)">
            <summary>
            
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:DogSE.Common.Serial.CompareTo(DogSE.Common.Serial)">
            <summary>
            
            </summary>
            <param name="otherSerial"></param>
            <returns></returns>
        </member>
        <member name="M:DogSE.Common.Serial.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="otherObject"></param>
            <returns></returns>
        </member>
        <member name="T:DogSE.Common.ExclusiveSerial">
            <summary>
            给出唯一的Serial
            </summary>
        </member>
        <member name="M:DogSE.Common.ExclusiveSerial.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:DogSE.Common.ExclusiveSerial.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="lMinSerial"></param>
        </member>
        <member name="M:DogSE.Common.ExclusiveSerial.#ctor(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="lMaxSerial"></param>
            <param name="lMinSerial"></param>
        </member>
        <member name="F:DogSE.Common.ExclusiveSerial.m_MinSerial">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Common.ExclusiveSerial.MinSerial">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Common.ExclusiveSerial.m_MaxSerial">
            <summary>
            
            </summary>
        </member>
        <member name="P:DogSE.Common.ExclusiveSerial.MaxSerial">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Common.ExclusiveSerial.m_ExclusiveSerial">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Common.ExclusiveSerial.m_LockExclusiveSerial">
            <summary>
            
            </summary>
        </member>
        <member name="F:DogSE.Common.ExclusiveSerial.m_ExclusiveSerialIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:DogSE.Common.ExclusiveSerial.NextExclusiveSerial">
            <summary>
            
            </summary>
        </member>
        <member name="M:DogSE.Common.ExclusiveSerial.ReleaseSerial(DogSE.Common.Serial)">
            <summary>
            
            </summary>
            <param name="serial"></param>
        </member>
    </members>
</doc>
